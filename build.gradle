buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		// The GraalVM plugin 0.9.26 and later is only compatible with Java 11 and later.
		// Because of dependency variant info from Gradle module metadata,
		// this makes it impossible to even declare it as a dependency if running on Java 8.
		// So as a workaround,
		// enable the GraalVM plugin only when explicitly requested (see below).
		if (project.hasProperty("enableGraalVM") && project.enableGraalVM == "true") {
			classpath(group: "org.graalvm.buildtools.native", name: "org.graalvm.buildtools.native.gradle.plugin", version: "0.10.1")
		}
	}
}

plugins {
	id("java-library")

	// Declare version numbers for all third-party plugins here
	// so that all subprojects use the same plugin versions.
	// The plugins are declared as .apply(false) here
	// and re-declared without .apply(false) in the subprojects that actually need them.
	id("de.hhu.stups.sablecc").version("1.1.0").apply(false)
	id("me.champeau.jmh").version("0.7.2").apply(false)
}

// group and version are also copied to all subprojects (see below)
project.group = 'de.hhu.stups'
project.version = "2.13.6-SNAPSHOT"
project.description = "The ProB parser libraries"

final isSnapshot = project.version.endsWith("-SNAPSHOT")

final SOURCE_ENCODING = "UTF-8"

ext {
	sableCCVersion = "3.9.0"
	sableCCDependency = [group: 'de.hhu.stups', name: 'sablecc', version: sableCCVersion]
	sableCCRuntimeDependency = [group: 'de.hhu.stups', name: 'sablecc-runtime', version: sableCCVersion]
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'

	group = rootProject.group
	version = rootProject.version

	repositories {
		mavenCentral()
		if (isSnapshot) {
			maven {
				name "snapshots"
				url "https://oss.sonatype.org/content/repositories/snapshots/"
			}
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = SOURCE_ENCODING
	}

	tasks.withType(Javadoc) {
		options.encoding = SOURCE_ENCODING
	}

	configurations.all {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}

	dependencies {
		testImplementation platform('org.junit:junit-bom:5.10.3')
		testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'
		testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'
		testCompileOnly group: 'junit', name: 'junit', version: '4.13.2'
		testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine'
		testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher'
	}

	java {
		sourceCompatibility = JavaVersion.VERSION_1_8

		withSourcesJar()
		withJavadocJar()
	}

	tasks.named('test', Test) {
		useJUnitPlatform()
	}

	javadoc {
		options {
			// silence warnings on missing javadoc
			addBooleanOption('Xdoclint:all,-missing', true)
		}
	}

	if (project.hasProperty("enableGraalVM") && project.enableGraalVM == "true") {
		// Required to make the org.graalvm.buildtools:junit-platform-native dependency resolve,
		// because it only exists for Java 11 and later.
		java.sourceCompatibility = JavaVersion.VERSION_11

		apply plugin: 'org.graalvm.buildtools.native'

		graalvmNative {
			binaries {
				all {
					resources.autodetect()
					// see https://build-native-java-apps.cc/expert-options/21/
					// the stack size must be given in bytes
					//override at runtime with -XX:StackSize=...
					buildArgs.add('-R:StackSize=8388608')
				}
			}

			toolchainDetection = false
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java

				pom {
					name = project.name
					description = provider {project.description}
					url = 'https://github.com/bendisposto/probparsers'

					licenses {
						license {
							name = 'Eclipse Public License, Version 1.0'
							url = 'http://www.eclipse.org/org/documents/epl-v10.html'
						}
					}

					scm {
						connection = 'scm:git:git://gitlab.cs.uni-duesseldorf.de/stups/prob/probparsers.git'
						developerConnection = 'scm:git:git@github.com:hhu-stups/probparsers.git'
						url = 'https://gitlab.cs.uni-duesseldorf.de/stups/prob/probparsers'
					}

					developers {
						developer {
							id = 'bendisposto'
							name = 'Jens Bendisposto'
							email = 'jens@bendisposto.de'
						}
						developer {
							id = 'leuschel'
							name = 'Michael Leuschel'
							email = 'leuschel@hhu.de'
						}
					}
				}
			}
		}

		repositories {
			maven {
				final releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
				final snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
				url isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
				if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
					credentials {
						username project.ossrhUsername
						password project.ossrhPassword
					}
				}
			}
		}
	}

	ext."signing.secretKeyRingFile" = rootProject.file("secring.gpg").absolutePath

	signing {
		sign publishing.publications.mavenJava
	}
}

ext {
	// This closure is called in each subproject that wants test reports generated.
	setupTestReport = { Project subproject, List<String> sableCCPackageNames ->
		void
		final jacocoTestReportTask = subproject.tasks.named("jacocoTestReport")
		jacocoTestReportTask.configure { JacocoReport task ->
			task.reports {
				xml.required = false
				csv.required = false
				html.outputLocation = subproject.layout.buildDirectory.dir('jacocoHtml')
			}

			task.classDirectories.from = task.classDirectories.from.collect {
				final exclusions = ["**/de/hhu/stups/sablecc/patch/**"]
				sableCCPackageNames.each { packageName ->
					final packagePath = packageName.replace(".", "/")
					exclusions.addAll([
						"**/${packagePath}/analysis/**",
						"**/${packagePath}/lexer/**",
						"**/${packagePath}/node/**",
						"**/${packagePath}/parser/**",
					])
				}
				it.asFileTree.matching {
					exclude(exclusions)
				}
			}
		}
	}
}
