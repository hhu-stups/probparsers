apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'de.hhu.stups.sablecc'

dependencies {
    sableCC(group: 'de.hhu.stups', name: 'sablecc', version: '3.2.13')
    compile project(":prologlib")
    compile project(":parserbase")
}

def readCurrentGitCommit() {
    def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
    def exitCode = proc.waitFor()
    if (exitCode != 0) {
        throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
    }
    return proc.in.readLines()[0]
}

final BUILD_PROPERTIES = file("src/main/resources/bparser-build.properties")

task createBuildConstants {
    doFirst {
        BUILD_PROPERTIES.parentFile.mkdirs()
        BUILD_PROPERTIES.delete()
        BUILD_PROPERTIES << "version=${project.version}\n"
        BUILD_PROPERTIES << "git=${readCurrentGitCommit()}\n"
    }
}
processResources.dependsOn(createBuildConstants)

task cleanBuildConstants(type: Delete) {
    delete(BUILD_PROPERTIES)
}
clean.dependsOn(cleanBuildConstants)

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/parser/node/**',
                '**/parser/parser/**',
                '**/parser/lexer/**',
                '**/preparser/**',
                '**/parser/analysis/Analysis.class',
                '**/parser/analysis/AnalysisAdapter.class',
                '**/parser/analysis/DepthFirstAdapter.class',
                '**/parser/analysis/ReversedDepthFirstAdapter.class',
                '**/parser/analysis/ExtendedDFAdapter.class',
                '**/parser/analysis/PreParserASTPrinter.class',
            ])
        })
    }
}
deploy.dependsOn jacocoTestReport
