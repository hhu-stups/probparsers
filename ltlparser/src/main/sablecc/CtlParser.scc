Package de.be4.ltl.core.ctlparser;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/
Helpers
  line_break = [10 + 13];
  layout_char = [[[[0 .. 32] - line_break] + [127..160]] + [[8206 .. 8207] + [8232 .. 8233]]];
  white_space = line_break | layout_char+;

  // Trivial helpers as a workaround to force SableCC to allow modifying the text of otherwise constant tokens:
  l_sq = '[';
  enabled = 'e(';
  atomic_proposition_begin = '{';

/*******************************************************************
 * States                                                          *
 *******************************************************************/
States
  ctl, atomic, action;

/*******************************************************************
 * Tokens                                                          *
 *******************************************************************/
Tokens
  {ctl} true = 'true';
  {ctl} false = 'false';
  {ctl} sink ='sink';
  {ctl} goal ='goal';
  {ctl} det_output ='det_output';
  {ctl} state_error ='error';
  {ctl} deadlock ='deadlock';
  {ctl} current = 'current';
  {ctl} l_par = '(';
  {ctl} r_par = ')';

  {ctl -> action} l_sq = l_sq;
  {ctl -> action} enabled = enabled;

  {ctl -> atomic, atomic} atomic_proposition_begin = atomic_proposition_begin;
  {atomic} atomic_proposition_end = '}';
  {atomic} ap_char = ([0 .. 0xffff]);

  {action} action_end = [')' + ']'];
  {action} action_begin = ['(' + '['];
  {action} tp_char = ([0 .. 0xffff]);

  /* Boolean Operators */
  {ctl} implies = '=>' | 0x21d2;
  {ctl} and = '&' | 0x2227;
  {ctl} or = 'or' | 0x2228;
  {ctl} not = 'not'| 0x00ac;

  /* CTL temporal operators */
  {ctl} exists = 'E';
  {ctl} forall = 'A';

  /* CTL temporal operators */
  {ctl} until = 'U';
  {ctl} globally = 'G';
  {ctl} finally = 'F';
  {ctl} next = 'X';

  white_space = white_space;

/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens
  white_space;


/*******************************************************************
 * Productions                                                     *
 *******************************************************************/
Productions
  ctl_formula {-> ctl} =
    {implication} [left]:ctl_formula implies [right]:ctl_formula2 {-> New ctl.implies(left.ctl, right.ctl)} |
    ctl_formula2 {-> ctl_formula2.ctl};

  ctl_formula2 {-> ctl} =
    {and} [left]:ctl_formula2 and [right]:ctl_formula3 {-> New ctl.and(left.ctl, right.ctl)} |
    {or} [left]:ctl_formula2 or [right]:ctl_formula3 {-> New ctl.or(left.ctl, right.ctl)} |
    ctl_formula3 {-> ctl_formula3.ctl};

  ctl_formula3 {-> ctl} =
    {eu} exists [left]:ctl_formula3 until [right]:ctl_formula4 {-> New ctl.eu(left.ctl, right.ctl)} |
    ctl_formula4 {-> ctl_formula4.ctl};

  ctl_formula4 {-> ctl} =
    {not} not ctl_formula4 {-> New ctl.not(ctl_formula4.ctl)} |
    {par} l_par ctl_formula r_par {-> ctl_formula.ctl} |
    {true} true {-> New ctl.true()} |
    {false} false {-> New ctl.false()} |
    {ena} exists next l_sq [cont]:ctl_formula4 {-> New ctl.ena(l_sq, cont.ctl)} |
    {en} exists next [cont]:ctl_formula4 {-> New ctl.en(cont.ctl)} |
    {an} forall next [cont]:ctl_formula4 {-> New ctl.an(cont.ctl)} |
    {eg} exists globally [cont]:ctl_formula4 {-> New ctl.eg(cont.ctl)} |
    {ef} exists finally [cont]:ctl_formula4 {-> New ctl.ef(cont.ctl)} |
    {ag} forall globally [cont]:ctl_formula4 {-> New ctl.ag(cont.ctl)} |
    {af} forall finally [cont]:ctl_formula4 {-> New ctl.af(cont.ctl)} |
    {unparsed} atomic_proposition_begin {-> New ctl.unparsed(atomic_proposition_begin)} |
    {enabled} enabled {-> New ctl.enabled(enabled)} |
    {action} l_sq {-> New ctl.action(l_sq)} |
    {sink} sink {-> New ctl.sink()} |
    {goal} goal {-> New ctl.goal()} |
    {det_output} det_output {-> New ctl.det_output()} |
    {error} state_error {-> New ctl.error()} |
    {deadlock} deadlock {-> New ctl.deadlock()} |
    {current} current {-> New ctl.current()};

/*******************************************************************
 * Abstract Syntax Tree                                            *
 *******************************************************************/
Abstract Syntax Tree
  ctl =
    {implies} [left]:ctl [right]:ctl |
    {and} [left]:ctl [right]:ctl |
    {or} [left]:ctl [right]:ctl |
    {eu} [left]:ctl [right]:ctl |
    {not} ctl |
    {ena} [operation]:l_sq [cont]:ctl |
    {action} [operation]:l_sq |
    {en} ctl |
    {an} ctl |
    {eg} ctl |
    {ef} ctl |
    {ag} ctl |
    {af} ctl |
    {unparsed} [predicate]:atomic_proposition_begin |
    {enabled} [operation]:enabled |
    {sink} |
    {goal} |
    {det_output} |
    {error} |
    {deadlock} |
    {current} |
    {true} |
    {false};
