Package de.be4.ltl.core.parser;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/
Helpers
  letter = [['a' .. 'z'] + ['A' .. 'Z']];
  digit = ['0' .. '9'];

  line_break = [10 + 13];
  layout_char = [[[[0 .. 32] - line_break] + [127..160]] + [[8206 .. 8207] + [8232 .. 8233]]];
  white_space = line_break | layout_char+;

  l_cur = '{';
  r_cur = '}';
  l_paren = '(';
  r_paren = ')';
  l_bracket = '[';
  r_bracket = ']';

  opt_white_space = layout_char*; // note: no newline (so as not to disturb counting); no comments
  // TODO: maybe allow full whitespace for enabled, available, ...

  enabled_start   = 'e'  opt_white_space '(' | 'enabled'   opt_white_space '(';
  available_start = 'Av' opt_white_space '(' | 'available' opt_white_space '(';

  strong_fair_start = 'sf' opt_white_space '(' | 'SF' opt_white_space '(';
  weak_fair_start   = 'wf' opt_white_space '(' | 'WF' opt_white_space '(';

  /* Should be removed at some point. It may come to confusions using capital letter for the fairness constraints. */
  strong_fair_all = 'SEF';
  weak_fair_all = 'WEF';

  dlk_action_start  = 'deadlock' opt_white_space '(';
  det_action_start  = 'deterministic' opt_white_space '(';
  ctrl_action_start = 'controller' opt_white_space '(';

  exists_quantor = '#';
  forall_quantor = '!';
  dot = '.';

  comma = ',';

  // TODO Should we make this definition match regular_identifier_literal in BParser (i. e. allow Unicode letters)?
  identifier_literal = letter (letter | digit | '_')*;

/*******************************************************************
 * States                                                          *
 *******************************************************************/
States
  ltl, atomic, action, actions;

/*******************************************************************
 * Tokens                                                          *
 *******************************************************************/
Tokens
  {ltl} true = 'true';
  {ltl} false = 'false';
  {ltl -> actions} dlk = dlk_action_start;
  {ltl -> actions} det = det_action_start;
  {ltl -> actions} ctrl = ctrl_action_start;
  {ltl} sink ='sink';
  {ltl} goal ='goal';
  {ltl} det_output ='det_output';
  {ltl} state_error ='error';
  {ltl} deadlock ='deadlock';
  {ltl} current = 'current';
  {ltl} l_par = l_paren;
  {ltl} r_par = r_paren;

  {ltl -> action} l_sq = l_bracket; // TODO: also allow textual version 'executed('
  {ltl -> action} enabled = enabled_start;
  {ltl -> action} available = available_start;

  {ltl -> atomic, atomic} atomic_proposition_begin = l_cur;

  {atomic} atomic_proposition_end = r_cur;
  {atomic} ap_char = ([0 .. 0xffff]);

  {action} action_end = [r_paren + r_bracket]; // TODO: check that parens/bracket match!
  {action} action_begin = [l_paren + l_bracket];
  {action} tp_char = ([0 .. 0xffff]);

  {ltl} unchanged = 'unchanged' | 'UNCHANGED'; // upper-case for TLA+ like feel
  {ltl} changed = 'changed';
  {ltl} decreasing = 'decreasing';
  {ltl} increasing = 'increasing';
  {ltl} before_after = 'before_after' | 'BA';

  {ltl} exists_identifier = exists_quantor white_space* identifier_literal white_space* dot;
  {ltl} forall_identifier = forall_quantor white_space* identifier_literal white_space* dot;

  {actions} args_begin = l_paren;
  {actions} args_end = r_paren;
  {actions} actions_split = comma;
  {actions} action_char = ([0 .. 0xffff]);

  /* Boolean Operators */
  {ltl} implies = '=>' | 0x21d2 | 'implies' | '->';  // we also allow Spin syntax ->
  {ltl} equivalent = '<=>' | 0x21d4 | 'equivalent' | '<->'; // we also allow Spin syntax <->
  {ltl} and = '&' | 0x2227 | 'and' | '&&';  // we also allow Spin syntax &&
  {ltl} or = 'or' | 0x2228 | '||'; // we also allow spin syntax ||
  {ltl} not = 'not' | 0x00ac; // conflict with forall | '!';

  /* LTL temporal operators */
  {ltl} until =     'U' | 'until' | 'stronguntil';
  {ltl} weakuntil = 'W' | 'weakuntil';
  {ltl} release =   'R' | 'release'; // Spin syntax is V for release ?

  {ltl} globally = 'G' | 'globally'   | 'always' | 0x25a1; // Unicode White Square; TODO support ASCII '[]'
  {ltl} finally =  'F' | 'eventually' | 'finally' | '<>' | 0x22c4; // Unicode Diamond Operator
  {ltl} next = 'X' | 'next';

  // TODO: support leadsto operator ~>, Unicode 0x21dd

  /* Past LTL temporal operators */
  {ltl} since = 'S' | 'since';
  {ltl} trigger = 'T' | 'trigger';

  {ltl} historically = 'H' | 'historically';
  {ltl} once = 'O' | 'once';
  {ltl} yesterday = 'Y'| 'yesterday';

  /* Fairness LTL operators */
  {ltl} strong_fair_everything = strong_fair_all;
  {ltl} weak_fair_everything = weak_fair_all;
  {ltl -> action} strong_fair = strong_fair_start;
  {ltl -> action} weak_fair = weak_fair_start;

  white_space = white_space;

/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens
  white_space;

/*******************************************************************
 * Productions                                                     *
 *******************************************************************/
Productions
  ltl_formula {-> ltl} =
    {fairness_implication} [left]:ltl_fairness implies [right]:ltl_formula0 {-> New ltl.fairness_implication(left.ltl, right.ltl)} |
    ltl_formula0 {-> ltl_formula0.ltl};

  ltl_formula0 {-> ltl} =
    {equivalent} [left]:ltl_formula1 equivalent [right]:ltl_formula1 {-> New ltl.equivalent(left.ltl, right.ltl)} |
    ltl_formula1 {-> ltl_formula1.ltl};

  ltl_formula1 {-> ltl} =
    {implication} [left]:ltl_formula1 implies [right]:ltl_formula2 {-> New ltl.implies(left.ltl, right.ltl)} |
    ltl_formula2 {-> ltl_formula2.ltl};

  ltl_formula2 {-> ltl} =
    {and} [left]:ltl_formula2 and [right]:ltl_formula3 {-> New ltl.and(left.ltl, right.ltl)} |
    {or} [left]:ltl_formula2 or [right]:ltl_formula3 {-> New ltl.or(left.ltl, right.ltl)} |
    ltl_formula3 {-> ltl_formula3.ltl};

  ltl_formula3 {-> ltl} =
    {until} [left]:ltl_formula3 until [right]:ltl_formula4 {-> New ltl.until(left.ltl, right.ltl)} |
    {weakuntil} [left]:ltl_formula3 weakuntil [right]:ltl_formula4 {-> New ltl.weakuntil(left.ltl, right.ltl)} |
    {release} [left]:ltl_formula3 release [right]:ltl_formula4 {-> New ltl.release(left.ltl, right.ltl)} |
    {since} [left]:ltl_formula3 since [right]:ltl_formula4 {-> New ltl.since(left.ltl, right.ltl)} |
    {trigger} [left]:ltl_formula3 trigger [right]:ltl_formula4 {-> New ltl.trigger(left.ltl, right.ltl)} |
    ltl_formula4 {-> ltl_formula4.ltl};

  ltl_formula4 {-> ltl} =
    {not} not ltl_formula4 {-> New ltl.not(ltl_formula4.ltl) } |
    {par} l_par ltl_formula r_par {-> ltl_formula.ltl} |
    {true} true {-> New ltl.true()} |
    {false} false {-> New ltl.false()} |
    {globally} globally ltl_formula4 {-> New ltl.globally(ltl_formula4.ltl)} |
    {finally} finally ltl_formula4 {-> New ltl.finally(ltl_formula4.ltl)} |
    {next} next ltl_formula4 {-> New ltl.next(ltl_formula4.ltl)} |
    {historically} historically ltl_formula4 {-> New ltl.historically(ltl_formula4.ltl)} |
    {once} once ltl_formula4 {-> New ltl.once(ltl_formula4.ltl)} |
    {yesterday} yesterday ltl_formula4 {-> New ltl.yesterday(ltl_formula4.ltl)} |
    {enabled} enabled {-> New ltl.enabled(enabled)} |
    {available} available {-> New ltl.available(available)} |
    {unchanged} unchanged l_par atomic_proposition_begin r_par {-> New ltl.unchanged(atomic_proposition_begin)} |
    {changed} changed l_par atomic_proposition_begin r_par {-> New ltl.changed(atomic_proposition_begin)} |
    {decreasing} decreasing l_par atomic_proposition_begin r_par {-> New ltl.decreasing(atomic_proposition_begin)} |
    {increasing} increasing l_par atomic_proposition_begin r_par {-> New ltl.increasing(atomic_proposition_begin)} |
    {before_after} before_after l_par atomic_proposition_begin r_par {-> New ltl.before_after(atomic_proposition_begin)} |
    {action} l_sq {-> New ltl.action(l_sq)} |
    {sink} sink {-> New ltl.sink()} |
    {goal} goal {-> New ltl.goal()} |
    {det_output} det_output {-> New ltl.det_output()} |
    {error} state_error {-> New ltl.error()} |
    {deadlock} deadlock {-> New ltl.deadlock()} |
    {current} current {-> New ltl.current()} |
    // #id.(unparsed => ltl_formula)
    {exists} exists_identifier l_par atomic_proposition_begin and ltl_formula r_par
      {-> New ltl.exists(exists_identifier,atomic_proposition_begin,ltl_formula.ltl)} |
    // !id.(unparsed => ltl_formula)
    {forall} forall_identifier l_par atomic_proposition_begin implies ltl_formula r_par
      {-> New ltl.forall(forall_identifier,atomic_proposition_begin,ltl_formula.ltl)} |
    {dlk} dlk [args]:arg_list {-> New ltl.dlk([args.actions])} |
    {det} det [args]:arg_list {-> New ltl.det([args.actions])} |
    {ctrl} ctrl [args]:arg_list {-> New ltl.ctrl([args.actions])} |
    {unparsed} atomic_proposition_begin {-> New ltl.unparsed(atomic_proposition_begin)};

  arg_list {-> actions*} =
    {single} [arg]:arg {-> [arg.actions]} |
    {multiple} [arg]:arg [rest]:arg_list {-> [arg.actions, rest.actions]};

  arg {-> actions} = {op} action_char {-> New actions.op(action_char)};

  // LTL Fairness Assumption Productions
  ltl_fairness {-> ltl} =
    {and_fair1} [left]:ltl_strong_fairness1 and [right]:ltl_weak_fairness1 {-> New ltl.and_fair1(left.ltl,right.ltl)} |
    {and_fair2} [left]:ltl_weak_fairness1 and [right]:ltl_strong_fairness1 {-> New ltl.and_fair2(left.ltl,right.ltl)} |
    {strong_assumptions} ltl_strong_fairness1 {-> New ltl.strong_assumptions(ltl_strong_fairness1.ltl)} |
    {weak_assumptions} ltl_weak_fairness1 {-> New ltl.weak_assumptions(ltl_weak_fairness1.ltl)};

  ltl_strong_fairness1 {-> ltl} =
    {strong_fair_all} strong_fair_everything {-> New ltl.strong_fair_all()} |
    ltl_strong_fairness {-> ltl_strong_fairness.ltl};

  ltl_strong_fairness {-> ltl} =
    {and} [left]:ltl_strong_fairness and [right]:ltl_strong_arg {-> New ltl.and(left.ltl, right.ltl)} |
    {or} [left]:ltl_strong_fairness or [right]:ltl_strong_arg {-> New ltl.or(left.ltl, right.ltl)} |
    ltl_strong_arg {-> ltl_strong_arg.ltl};

  ltl_strong_arg {-> ltl} =
    {strong_fair} strong_fair {-> New ltl.strong_fair(strong_fair)} |
    {par} l_par ltl_strong_fairness r_par {-> ltl_strong_fairness.ltl};

  ltl_weak_fairness1 {-> ltl} =
    {weak_fair_all} weak_fair_everything {-> New ltl.weak_fair_all()} |
    ltl_weak_fairness {-> ltl_weak_fairness.ltl};

  ltl_weak_fairness {-> ltl} =
    {and} [left]:ltl_weak_fairness and [right]:ltl_weak_arg {-> New ltl.and(left.ltl, right.ltl)} |
    {or} [left]:ltl_weak_fairness or [right]:ltl_weak_arg {-> New ltl.or(left.ltl, right.ltl)} |
    ltl_weak_arg {-> ltl_weak_arg.ltl};

  ltl_weak_arg {-> ltl} =
    {weak_fair} weak_fair {-> New ltl.weak_fair(weak_fair)} |
    {par} l_par ltl_weak_fairness r_par {-> ltl_weak_fairness.ltl};

/*******************************************************************
 * Abstract Syntax Tree                                            *
 *******************************************************************/
Abstract Syntax Tree
  ltl =
   {implies} [left]:ltl [right]:ltl |
   {equivalent} [left]:ltl [right]:ltl |
   {and} [left]:ltl [right]:ltl |
   {or} [left]:ltl [right]:ltl |
   {until} [left]:ltl [right]:ltl |
   {weakuntil} [left]:ltl [right]:ltl |
   {release} [left]:ltl [right]:ltl |
   {since} [left]:ltl [right]:ltl |
   {trigger} [left]:ltl [right]:ltl |
   {not} ltl |
   {globally} ltl |
   {finally} ltl |
   {next} ltl |
   {historically} ltl |
   {once} ltl |
   {yesterday} ltl |
   {enabled} [operation]:enabled |
   {available} [operation]:available |
   {unchanged} [expression]:atomic_proposition_begin |
   {changed} [expression]:atomic_proposition_begin |
   {decreasing} [expression]:atomic_proposition_begin |
   {increasing} [expression]:atomic_proposition_begin |
   {before_after} [predicate]:atomic_proposition_begin |
   {weak_fair} [operation]:weak_fair |
   {strong_fair} [operation]:strong_fair |
   {action} [operation]:l_sq |
   {unparsed} [predicate]:atomic_proposition_begin |
   {sink} |
   {goal} |
   {det_output} |
   {error} |
   {deadlock} |
   {current} |
   {true} |
   {false} |
   {exists} exists_identifier [predicate]:atomic_proposition_begin ltl |
   {forall} forall_identifier [predicate]:atomic_proposition_begin ltl |
   {fairness_implication} [left]:ltl [right]:ltl |
   {strong_assumptions} ltl |
   {weak_assumptions} ltl |
   {strong_fair_all} |
   {weak_fair_all} |
   {and_fair1} [left]:ltl [right]:ltl |
   {and_fair2} [left]:ltl [right]:ltl |
   {dlk} [args]:actions* |
   {det} [args]:actions* |
   {ctrl} [args]:actions*;

  actions =
    {op} [operation]:action_char;
