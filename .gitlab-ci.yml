image: openjdk:8-jdk-slim
stages:
  - test
  - deploy
  - trigger

variables:
  GRADLE_ARGS: --no-daemon --stacktrace
  DEBIAN_FRONTEND: noninteractive

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - apt-get update &&  apt-get install -y git patch

.tests:
  stage: test
  script: ./gradlew ${GRADLE_ARGS} clean deploy
  artifacts:
    paths:
      - build/reports/tests/
    when: on_failure

tests:jdk-8:
  extends: .tests

tests:jdk-11:
  extends: .tests
  image: openjdk:11-jdk-slim

tests:macos:
  extends: .tests
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  tags:
    - macos

tests:windows64:
  extends: .tests
  before_script: []
  script: gradlew.bat %GRADLE_ARGS% clean deploy
  tags:
    - prob
    - win64

publish:
  stage: deploy
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - apt-get update &&  apt-get install -y git patch
    - openssl aes-256-cbc -pass "env:ENCRYPTION_PASSWORD" -d -a -md md5 -in secring.gpg.enc       -out secring.gpg 
    - openssl aes-256-cbc -pass "env:ENCRYPTION_PASSWORD" -d -a -md md5 -in pubring.gpg.enc       -out pubring.gpg
    - openssl aes-256-cbc -pass "env:ENCRYPTION_PASSWORD" -d -a -md md5 -in gradle.properties.enc -out gradle.properties
  script:
    - ./gradlew ${GRADLE_ARGS} uploadArchives
  only: 
    - master 
    - develop

prob_snapshot_parser_tests:
  stage: trigger
  image: alpine:3.9
  before_script:
    - apk add --update curl
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - curl -X POST -F "token=$CI_JOB_TOKEN" -F "ref=develop" -F "variables[BUILD_TYPE]=snapshot-parser-build" https://gitlab.cs.uni-duesseldorf.de/api/v4/projects/897/trigger/pipeline
  only:
    - develop
