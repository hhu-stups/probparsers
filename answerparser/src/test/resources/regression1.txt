yes('.'(=('PP','\nMACHINE Rangierfahrt_KI_1_1\nSETS /* deferred */\n  ENV_BLOCKS;\n  ENV_OBJECTS\n ; /* enumerated */\n  ENV_SIGNAL_STATES={Sh0,Sh1,Wn7};\n  ENV_POINT_STATES={Wn1,Wn2,undef};\n  ENV_STOP_REASONS={signal_with_train_protect,signal_without_train_protect,undef_point,derailer,brake_shoe,human,wagon}\nCONCRETE_CONSTANTS\n  ENV_TRK,\n  lok,\n  ENV_DERAILERS,\n  ENV_SIGNALS,\n  ENV_POINTS,\n  ENV_next_init,\n  ENV_occ_init,\n  ENV_signals_init,\n  ENV_points_init,\n  ENV_border_signs,\n  ENV_block_length,\n  ENV_object_length,\n  ENV_object_front_init,\n  ENV_object_back_init,\n  ENV_object_type,\n  ENV_stop_distances_front_init,\n  ENV_stop_positions_front_init,\n  ENV_stop_distances_back_init,\n  ENV_stop_positions_back_init,\n  VIS_max_detect_dist,\n  CTR_knows_signal_positions,\n  CTR_knows_point_positions,\n  B347a,\n  B347b,\n  B347c,\n  B855a,\n  B855b,\n  C55,\n  Person\nABSTRACT_VARIABLES\n  ENV_occ,\n  ENV_next,\n  ENV_active_derailers,\n  ENV_brake_shoes,\n  ENV_signal_states,\n  ENV_point_states,\n  ENV_old_point_states,\n  ENV_object_front,\n  ENV_object_back,\n  ENV_stop_distances_front,\n  ENV_stop_distances_back,\n  ENV_stop_positions_front,\n  ENV_stop_positions_back,\n  ENV_derailed,\n  ENV_safety_critical,\n  ENV_brakes_forced_front,\n  ENV_brakes_forced_back,\n  VIS_detected_track,\n  VIS_detected_sig_front,\n  VIS_detected_sig_back,\n  VIS_detected_points_front,\n  VIS_detected_obj_front,\n  VIS_detected_stops_front,\n  VIS_detected_stops_back,\n  VIS_detected_border_signs_front,\n  CTR_allow_forw,\n  CTR_allow_back\n/* PROMOTED OPERATIONS\n  ENV_StartMovePoint,\n  ENV_EndMovePoint,\n  ENV_ActivateDerailer,\n  ENV_DeactivateDerailer,\n  ENV_PlaceBrakeShoe_Front,\n  ENV_RemoveBrakeShoe_Front,\n  ENV_SwitchSignalToSh0,\n  ENV_SwitchSignalToSh1,\n  VIS_DetectCorrectObject_Front,\n  VIS_DetectDisappearedStopReason_Front,\n  VIS_DetectCorrectSignal_Front,\n  VIS_DetectWrongSignal_Front,\n  VIS_DetectCorrectSignal_Back,\n  VIS_DetectWrongSignal_Back,\n  VIS_DetectCorrectPointPosition_Front,\n  VIS_DetectWrongPointPosition_Front,\n  VIS_DetectCorrectBorderSign_Front,\n  VIS_DetectCorrectTrack,\n  CTR_SetAllowFront,\n  CTR_IgnoreDetectionFront,\n  CTR_SetAllowBack,\n  RF_MoveLokForwards,\n  RF_MoveLokBackwards */\n/* NOT PROMOTED OPERATIONS\n  `Rangierfahrt_KI`.`ENV_SetOccupied`,\n  `Rangierfahrt_KI`.`ENV_SetObjectFront`,\n  `Rangierfahrt_KI`.`ENV_SetObjectFrontOfLokForBlock`,\n  `Rangierfahrt_KI`.`ENV_SetObjectBack`,\n  `Rangierfahrt_KI`.`ENV_SetObjectBackOfLokForBlock`,\n  `Rangierfahrt_KI`.`ENV_SetStopDistancesFront`,\n  `Rangierfahrt_KI`.`ENV_SetStopDistancesBack`,\n  `Rangierfahrt_KI`.`ENV_SetSignalState`,\n  `Rangierfahrt_KI`.`ENV_SetBrakesForcedFront`,\n  `Rangierfahrt_KI`.`ENV_SetBrakesForcedBack`,\n  `Rangierfahrt_KI`.`ENV_SetSafetyCritical`,\n  `Rangierfahrt_KI`.`ENV_SetDerailed`,\n  `Rangierfahrt_KI`.`ENV_SetDerailedForLok`,\n  `Rangierfahrt_KI`.`VIS_SetDetectedStopsFront`,\n  `Rangierfahrt_KI`.`VIS_SetDetectedStopsBack`,\n  `Rangierfahrt_KI`.`VIS_SetDetectedSigFront`,\n  `Rangierfahrt_KI`.`VIS_SetDetectedSigBack`,\n  `Rangierfahrt_KI`.`VIS_SetDetectedPointsFront`,\n  `Rangierfahrt_KI`.`VIS_SetDetectedBorderSignsFront` */\nPROPERTIES\n    ENV_TRK : POW(ENV_BLOCKS * ENV_BLOCKS)\n  & lok : ENV_OBJECTS\n  & ENV_POINTS : POW(ENV_BLOCKS * (ENV_BLOCKS * ENV_BLOCKS))\n  & ENV_stop_distances_front_init : POW(ENV_BLOCKS * INTEGER * ENV_STOP_REASONS)\n  & ENV_stop_distances_back_init : POW(ENV_BLOCKS * INTEGER * ENV_STOP_REASONS)\n  & CTR_knows_signal_positions : BOOL\n  & CTR_knows_point_positions : BOOL\n  & B347a : ENV_BLOCKS\n  & B347b : ENV_BLOCKS\n  & B347c : ENV_BLOCKS\n  & B855a : ENV_BLOCKS\n  & C55 : ENV_OBJECTS\n  & Person : ENV_OBJECTS\n  & dom(ENV_TRK) \\/ ran(ENV_TRK) = ENV_BLOCKS\n  & ENV_TRK /\\ ENV_TRK~ = {}\n  & closure1(ENV_TRK) : FIN(closure1(ENV_TRK))\n  & closure1(ENV_TRK~) : FIN(closure1(ENV_TRK~))\n  & ENV_next_init <: ENV_TRK\n  & ENV_next_init : ENV_BLOCKS >+> ENV_BLOCKS\n  & ENV_occ_init : ENV_OBJECTS --> ENV_BLOCKS\n  & !(o,b1,b2).(\n     (\n      o : ENV_OBJECTS\n      &\n      b1 : ENV_BLOCKS\n      &\n      b2 : ENV_BLOCKS\n      &\n      o |-> b1 : ENV_occ_init\n      &\n      o |-> b2 : ENV_occ_init\n      &\n      b1 |-> b2 : ENV_TRK\n     )\n     =>\n     b1 |-> b2 : ENV_next_init\n    )\n  & ENV_DERAILERS <: ENV_TRK\n  & ENV_SIGNALS <: ENV_TRK \\/ ENV_TRK~\n  & ENV_signals_init : ENV_SIGNALS --> ENV_SIGNAL_STATES\n  & !(B1,B2,B3).(\n     (\n      B1 : ENV_BLOCKS\n      &\n      B2 : ENV_BLOCKS\n      &\n      B3 : ENV_BLOCKS\n      &\n      {B2 |-> B3} = ENV_POINTS[{B1}]\n      &\n      B2 /= B3\n     )\n     =>\n     (\n      B1 |-> B2 : ENV_TRK\n      &\n      B1 |-> B3 : ENV_TRK\n     )\n    )\n  & ENV_points_init : ENV_POINTS --> ENV_POINT_STATES\n  & ENV_border_signs : ENV_POINTS --> NATURAL\n  & ENV_block_length : ENV_BLOCKS --> NATURAL\n  & ENV_object_length : ENV_OBJECTS --> NATURAL\n  & ENV_object_front_init : ENV_OBJECTS --> (ENV_BLOCKS +-> NATURAL)\n  & ENV_object_back_init : ENV_OBJECTS --> (ENV_BLOCKS +-> NATURAL)\n  & ENV_stop_positions_front_init : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & ENV_stop_positions_back_init : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & ENV_object_type : ENV_OBJECTS - {lok} --> {human,wagon}\n  & VIS_max_detect_dist : NATURAL1\n  & dom(ENV_TRK) \\/ ran(ENV_TRK) = ENV_BLOCKS\n  & ENV_TRK /\\ ENV_TRK~ = {}\n  & closure1(ENV_TRK) : FIN(closure1(ENV_TRK))\n  & closure1(ENV_TRK~) : FIN(closure1(ENV_TRK~))\n  & ENV_next_init <: ENV_TRK\n  & ENV_next_init : ENV_BLOCKS >+> ENV_BLOCKS\n  & ENV_occ_init : ENV_OBJECTS --> ENV_BLOCKS\n  & !(o,b1,b2).(\n     (\n      o : ENV_OBJECTS\n      &\n      b1 : ENV_BLOCKS\n      &\n      b2 : ENV_BLOCKS\n      &\n      o |-> b1 : ENV_occ_init\n      &\n      o |-> b2 : ENV_occ_init\n      &\n      b1 |-> b2 : ENV_TRK\n     )\n     =>\n     b1 |-> b2 : ENV_next_init\n    )\n  & ENV_DERAILERS <: ENV_TRK\n  & ENV_SIGNALS <: ENV_TRK \\/ ENV_TRK~\n  & ENV_signals_init : ENV_SIGNALS --> ENV_SIGNAL_STATES\n  & !(B1,B2,B3).(\n     (\n      B1 : ENV_BLOCKS\n      &\n      B2 : ENV_BLOCKS\n      &\n      B3 : ENV_BLOCKS\n      &\n      {B2 |-> B3} = ENV_POINTS[{B1}]\n      &\n      B2 /= B3\n     )\n     =>\n     (\n      B1 |-> B2 : ENV_TRK\n      &\n      B1 |-> B3 : ENV_TRK\n     )\n    )\n  & ENV_points_init : ENV_POINTS --> ENV_POINT_STATES\n  & ENV_border_signs : ENV_POINTS --> NATURAL\n  & ENV_block_length : ENV_BLOCKS --> NATURAL\n  & ENV_object_length : ENV_OBJECTS --> NATURAL\n  & ENV_object_front_init : ENV_OBJECTS --> (ENV_BLOCKS +-> NATURAL)\n  & ENV_object_back_init : ENV_OBJECTS --> (ENV_BLOCKS +-> NATURAL)\n  & ENV_stop_positions_front_init : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & ENV_stop_positions_back_init : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & ENV_object_type : ENV_OBJECTS - {lok} --> {human,wagon}\n  & ENV_OBJECTS = {lok,C55,Person}\n  & card({lok,C55,Person}) = 3\n  & ENV_BLOCKS = {B347a,B347b,B347c,B855a,B855b}\n  & card({B347a,B347b,B855a,B855b,B347c}) = 5\n  & ENV_TRK = {B347a |-> B347b,B347b |-> B347c,B347a |-> B855a,B855a |-> B855b}\n  & ENV_DERAILERS = {B855a |-> B855b,B347b |-> B347c}\n  & ENV_SIGNALS = {B347a |-> B855a,B347a |-> B347b} \\/ ENV_DERAILERS \\/ ENV_DERAILERS~\n  & ENV_POINTS = {B347a |-> (B347b |-> B855a)}\n  & ENV_occ_init = {lok |-> B347a,C55 |-> B855b,Person |-> B855b}\n  & ENV_next_init = {B347a |-> B347b,B347b |-> B347c,B855a |-> B855b}\n  & ENV_signals_init = {B347a |-> B855a |-> Sh0,B347a |-> B347b |-> Sh0} \\/ ENV_DERAILERS * {Wn7} \\/ ENV_DERAILERS~ * {Wn7}\n  & ENV_points_init = {B347a |-> (B347b |-> B855a) |-> Wn1}\n  & ENV_border_signs = {B347a |-> (B347b |-> B855a) |-> 20}\n  & ENV_block_length = ENV_BLOCKS * {100}\n  & ENV_object_length = {lok |-> 30,C55 |-> 20,Person |-> 1}\n  & ENV_object_front_init = {lok |-> {B347a |-> ENV_object_length(lok)},C55 |-> {B855b |-> ENV_block_length(B855b) - 1},Person |-> {B855b |-> ENV_block_length(B855b) - ENV_object_length(C55) - 2}}\n  & ENV_object_back_init = {lok |-> {B347a |-> 0},C55 |-> {B855b |-> ENV_block_length(B855b) - ENV_object_length(C55) - 1},Person |-> {B855b |-> ENV_block_length(B855b) - ENV_object_length(C55) - ENV_object_length(Person) - 2}}\n  & B855b : dom(ENV_object_back_init(C55))\n  & B855b : dom(ENV_object_back_init(Person))\n  & ENV_object_type = {C55 |-> wagon,Person |-> human}\n  & ENV_stop_distances_front_init = {B347b |-> ENV_block_length(B347a) - ENV_object_length(lok) |-> signal_without_train_protect}\n  & ENV_stop_positions_front_init = {B347b |-> 0 |-> signal_without_train_protect,B855a |-> 0 |-> signal_without_train_protect,B855b |-> ENV_object_back_init(C55)(B855b) |-> wagon,B855b |-> ENV_object_back_init(Person)(B855b) |-> human}\n  & ENV_stop_distances_back_init = {}\n  & ENV_stop_positions_back_init = {}\n  & VIS_max_detect_dist = 200\n  & CTR_knows_signal_positions = TRUE\n  & CTR_knows_point_positions = TRUE\nINVARIANT\n    ENV_occ : POW(ENV_OBJECTS * ENV_BLOCKS)\n  & ENV_stop_distances_front : POW(ENV_BLOCKS * INTEGER * ENV_STOP_REASONS)\n  & ENV_stop_distances_back : POW(ENV_BLOCKS * INTEGER * ENV_STOP_REASONS)\n  & ENV_safety_critical : BOOL\n  & ENV_brakes_forced_front : BOOL\n  & ENV_brakes_forced_back : BOOL\n  & dom(ENV_occ) = ENV_OBJECTS\n  & ENV_next <: ENV_TRK\n  & ENV_next : ENV_BLOCKS >+> ENV_BLOCKS\n  & closure1(ENV_next) : FIN(closure1(ENV_next))\n  & closure1(ENV_next~) : FIN(closure1(ENV_next~))\n  & !(o,b1,b2).(\n     (\n      o : ENV_OBJECTS\n      &\n      b1 : ENV_BLOCKS\n      &\n      b2 : ENV_BLOCKS\n      &\n      o |-> b1 : ENV_occ\n      &\n      o |-> b2 : ENV_occ\n      &\n      b1 |-> b2 : ENV_TRK\n     )\n     =>\n     b1 |-> b2 : ENV_next\n    )\n  & ENV_active_derailers <: ENV_DERAILERS\n  & !(b1,b2).(\n     (\n      b1 : ENV_BLOCKS\n      &\n      b2 : ENV_BLOCKS\n      &\n      b1 |-> b2 : ENV_active_derailers\n      &\n      lok |-> b1 : ENV_occ\n     )\n     =>\n     (lok |-> b2) /: ENV_occ\n    )\n  & ENV_brake_shoes : ENV_BLOCKS +-> INTEGER\n  & ENV_signal_states : ENV_SIGNALS --> ENV_SIGNAL_STATES\n  & !s1.(\n     s1 : ENV_SIGNALS\n     =>\n     !s2.(\n      (\n       s2 : ENV_SIGNALS\n       &\n       s1 /= s2\n       &\n       prj1(s1) = prj1(s2)\n       &\n       btrue /* LEQ_SYM(s1,s2) */\n      )\n      =>\n      ENV_signal_states(s1) = ENV_signal_states(s2)\n     )\n    )\n  & !s.(\n     (\n      s : ENV_SIGNALS /\\ ENV_DERAILERS\n      &\n      ENV_signal_states(s) = Wn7\n     )\n     =>\n     s /: ENV_active_derailers\n    )\n  & !B1.(\n     B1 : dom(ENV_next)\n     =>\n     !(B2,B3).(\n      (\n       B2 : ENV_BLOCKS\n       &\n       B3 : ENV_BLOCKS\n       &\n       {B2 |-> B3} = ENV_POINTS[{B1}]\n       &\n       B2 /= B3\n      )\n      =>\n      (\n       B1 |-> B2 : ENV_next\n       or\n       B1 |-> B3 : ENV_next\n      )\n     )\n    )\n  & ENV_point_states : ENV_POINTS --> ENV_POINT_STATES\n  & ENV_old_point_states : ENV_POINTS --> ENV_POINT_STATES\n  & ENV_object_front : ENV_OBJECTS --> (ENV_BLOCKS +-> NATURAL)\n  & ENV_object_back : ENV_OBJECTS --> (ENV_BLOCKS +-> NATURAL)\n  & !(b,o).(\n     (\n      o : dom(ENV_object_back)\n      &\n      b : dom(ENV_object_back(o))\n     )\n     =>\n     (\n      0 <= ENV_object_back(o)(b)\n      &\n      ENV_object_back(o)(b) < ENV_block_length(b)\n     )\n    )\n  & !(b,o).(\n     (\n      b : ENV_BLOCKS\n      &\n      o : ENV_OBJECTS\n      &\n      not(\n       o : dom(ENV_object_front)\n       &\n       b : dom(ENV_object_front(o))\n      )\n     )\n     =>\n     (\n      b /: dom(ENV_object_front(o))\n      &\n      card(dom(ENV_object_front(o))) = 1\n     )\n    )\n  & !(b,o).(\n     (\n      b : ENV_BLOCKS\n      &\n      o : ENV_OBJECTS\n      &\n      not(\n       o : dom(ENV_object_back)\n       &\n       b : dom(ENV_object_back(o))\n      )\n     )\n     =>\n     (\n      b /: dom(ENV_object_back(o))\n      &\n      card(dom(ENV_object_back(o))) = 1\n     )\n    )\n  & !(b1,b2,o).(\n     (\n      o : dom(ENV_object_back)\n      &\n      b1 : dom(ENV_object_back(o))\n      &\n      o : dom(ENV_object_front)\n      &\n      b2 : dom(ENV_object_front(o))\n     )\n     =>\n     ENV_object_length(o) = ((IF b1 /= b2 THEN ENV_block_length(b1) ELSE 0 END) - ENV_object_back(o)(b1)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (b1 |-> b : closure1(ENV_next) & b |-> b2 : closure1(ENV_next) & l = ENV_block_length(b))|l) + ENV_object_front(o)(b2)\n    )\n  & !(b,o).(\n     (\n      o : ENV_OBJECTS\n      &\n      b : dom(ENV_object_front(o))\n     )\n     =>\n     ENV_object_front(o)(b) < ENV_block_length(b)\n    )\n  & ENV_stop_distances_front : FIN(ENV_stop_distances_front)\n  & ENV_stop_positions_front : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & ENV_stop_positions_front : FIN(ENV_stop_positions_front)\n  & ENV_stop_distances_back : FIN(ENV_stop_distances_back)\n  & ENV_stop_positions_back : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & (\n     lok : dom(ENV_object_front)\n     =>\n     !b.(\n      (\n       b : dom(ENV_object_front(lok))\n       &\n       #(block,d).(\n        d : INTEGER\n        &\n        block |-> d |-> brake_shoe : ENV_stop_distances_front\n        &\n        block : closure(ENV_next~)[ENV_next[{b}] \\/ {b}]\n        &\n        d <= 0\n       )\n      )\n      =>\n      ENV_brakes_forced_front = TRUE\n     )\n    )\n  & (\n     lok : dom(ENV_object_back)\n     =>\n     !b.(\n      (\n       b : dom(ENV_object_back(lok))\n       &\n       #(block,d).(\n        d : INTEGER\n        &\n        block |-> d |-> brake_shoe : ENV_stop_distances_back\n        &\n        block : closure(ENV_next)[((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)[{b}] \\/ {b}]\n        &\n        d <= 0\n       )\n      )\n      =>\n      ENV_brakes_forced_back = TRUE\n     )\n    )\n  & ENV_derailed : ENV_OBJECTS --> BOOL\n  & dom(ENV_occ) = ENV_OBJECTS\n  & ENV_next <: ENV_TRK\n  & ENV_next : ENV_BLOCKS >+> ENV_BLOCKS\n  & closure1(ENV_next) : FIN(closure1(ENV_next))\n  & closure1(ENV_next~) : FIN(closure1(ENV_next~))\n  & !(o,b1,b2).(\n     (\n      o : ENV_OBJECTS\n      &\n      b1 : ENV_BLOCKS\n      &\n      b2 : ENV_BLOCKS\n      &\n      o |-> b1 : ENV_occ\n      &\n      o |-> b2 : ENV_occ\n      &\n      b1 |-> b2 : ENV_TRK\n     )\n     =>\n     b1 |-> b2 : ENV_next\n    )\n  & ENV_active_derailers <: ENV_DERAILERS\n  & !(b1,b2).(\n     (\n      b1 : ENV_BLOCKS\n      &\n      b2 : ENV_BLOCKS\n      &\n      b1 |-> b2 : ENV_active_derailers\n      &\n      lok |-> b1 : ENV_occ\n     )\n     =>\n     (lok |-> b2) /: ENV_occ\n    )\n  & ENV_brake_shoes : ENV_BLOCKS +-> INTEGER\n  & ENV_signal_states : ENV_SIGNALS --> ENV_SIGNAL_STATES\n  & !s1.(\n     s1 : ENV_SIGNALS\n     =>\n     !s2.(\n      (\n       s2 : ENV_SIGNALS\n       &\n       s1 /= s2\n       &\n       prj1(s1) = prj1(s2)\n       &\n       btrue /* LEQ_SYM(s1,s2) */\n      )\n      =>\n      ENV_signal_states(s1) = ENV_signal_states(s2)\n     )\n    )\n  & !s.(\n     (\n      s : ENV_SIGNALS /\\ ENV_DERAILERS\n      &\n      ENV_signal_states(s) = Wn7\n     )\n     =>\n     s /: ENV_active_derailers\n    )\n  & !B1.(\n     B1 : dom(ENV_next)\n     =>\n     !(B2,B3).(\n      (\n       B2 : ENV_BLOCKS\n       &\n       B3 : ENV_BLOCKS\n       &\n       {B2 |-> B3} = ENV_POINTS[{B1}]\n       &\n       B2 /= B3\n      )\n      =>\n      (\n       B1 |-> B2 : ENV_next\n       or\n       B1 |-> B3 : ENV_next\n      )\n     )\n    )\n  & ENV_point_states : ENV_POINTS --> ENV_POINT_STATES\n  & ENV_old_point_states : ENV_POINTS --> ENV_POINT_STATES\n  & ENV_object_front : ENV_OBJECTS --> (ENV_BLOCKS +-> NATURAL)\n  & ENV_object_back : ENV_OBJECTS --> (ENV_BLOCKS +-> NATURAL)\n  & !(b,o).(\n     (\n      o : dom(ENV_object_back)\n      &\n      b : dom(ENV_object_back(o))\n     )\n     =>\n     (\n      0 <= ENV_object_back(o)(b)\n      &\n      ENV_object_back(o)(b) < ENV_block_length(b)\n     )\n    )\n  & !(b,o).(\n     (\n      b : ENV_BLOCKS\n      &\n      o : ENV_OBJECTS\n      &\n      not(\n       o : dom(ENV_object_front)\n       &\n       b : dom(ENV_object_front(o))\n      )\n     )\n     =>\n     (\n      b /: dom(ENV_object_front(o))\n      &\n      card(dom(ENV_object_front(o))) = 1\n     )\n    )\n  & !(b,o).(\n     (\n      b : ENV_BLOCKS\n      &\n      o : ENV_OBJECTS\n      &\n      not(\n       o : dom(ENV_object_back)\n       &\n       b : dom(ENV_object_back(o))\n      )\n     )\n     =>\n     (\n      b /: dom(ENV_object_back(o))\n      &\n      card(dom(ENV_object_back(o))) = 1\n     )\n    )\n  & !(b1,b2,o).(\n     (\n      o : dom(ENV_object_back)\n      &\n      b1 : dom(ENV_object_back(o))\n      &\n      o : dom(ENV_object_front)\n      &\n      b2 : dom(ENV_object_front(o))\n     )\n     =>\n     ENV_object_length(o) = ((IF b1 /= b2 THEN ENV_block_length(b1) ELSE 0 END) - ENV_object_back(o)(b1)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (b1 |-> b : closure1(ENV_next) & b |-> b2 : closure1(ENV_next) & l = ENV_block_length(b))|l) + ENV_object_front(o)(b2)\n    )\n  & !(b,o).(\n     (\n      o : ENV_OBJECTS\n      &\n      b : dom(ENV_object_front(o))\n     )\n     =>\n     ENV_object_front(o)(b) < ENV_block_length(b)\n    )\n  & ENV_stop_distances_front : FIN(ENV_stop_distances_front)\n  & ENV_stop_positions_front : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & ENV_stop_positions_front : FIN(ENV_stop_positions_front)\n  & ENV_stop_distances_back : FIN(ENV_stop_distances_back)\n  & ENV_stop_positions_back : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & (\n     lok : dom(ENV_object_front)\n     =>\n     !b.(\n      (\n       b : dom(ENV_object_front(lok))\n       &\n       #(block,d).(\n        d : INTEGER\n        &\n        block |-> d |-> brake_shoe : ENV_stop_distances_front\n        &\n        block : closure(ENV_next~)[ENV_next[{b}] \\/ {b}]\n        &\n        d <= 0\n       )\n      )\n      =>\n      ENV_brakes_forced_front = TRUE\n     )\n    )\n  & (\n     lok : dom(ENV_object_back)\n     =>\n     !b.(\n      (\n       b : dom(ENV_object_back(lok))\n       &\n       #(block,d).(\n        d : INTEGER\n        &\n        block |-> d |-> brake_shoe : ENV_stop_distances_back\n        &\n        block : closure(ENV_next)[((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)[{b}] \\/ {b}]\n        &\n        d <= 0\n       )\n      )\n      =>\n      ENV_brakes_forced_back = TRUE\n     )\n    )\n  & ENV_derailed : ENV_OBJECTS --> BOOL\n  & VIS_detected_track <: ENV_TRK\n  & VIS_detected_track : ENV_BLOCKS >+> ENV_BLOCKS\n  & VIS_detected_sig_front : ENV_SIGNALS +-> ENV_SIGNAL_STATES\n  & VIS_detected_sig_back : ENV_SIGNALS +-> ENV_SIGNAL_STATES\n  & VIS_detected_points_front : ENV_POINTS +-> ENV_POINT_STATES\n  & VIS_detected_obj_front <: ENV_OBJECTS - {lok}\n  & VIS_detected_stops_front : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & VIS_detected_stops_front : FIN(VIS_detected_stops_front)\n  & VIS_detected_stops_back : ENV_BLOCKS * NATURAL <-> ENV_STOP_REASONS\n  & VIS_detected_stops_back : FIN(VIS_detected_stops_back)\n  & VIS_detected_border_signs_front : ENV_TRK * NATURAL1 +-> INTEGER\n  & CTR_allow_forw : NATURAL\n  & CTR_allow_back : NATURAL\nINITIALISATION\n    BEGIN\n           ENV_occ := ENV_occ_init\n        ||\n           ENV_next := ENV_next_init\n        ||\n           ENV_active_derailers := {}\n        ||\n           ENV_brake_shoes := {}\n        ||\n           ENV_signal_states := ENV_signals_init\n        ||\n           ENV_point_states := ENV_points_init\n        ||\n           ENV_old_point_states := ENV_points_init\n        ||\n           ENV_object_front := ENV_object_front_init\n        ||\n           ENV_object_back := ENV_object_back_init\n        ||\n           ENV_stop_distances_front := ENV_stop_distances_front_init\n        ||\n           ENV_stop_positions_front := ENV_stop_positions_front_init\n        ||\n           ENV_stop_distances_back := ENV_stop_distances_back_init\n        ||\n           ENV_stop_positions_back := ENV_stop_positions_back_init\n        ||\n           ENV_derailed := ENV_OBJECTS * {FALSE}\n        ||\n           ENV_safety_critical := FALSE\n        ||\n           ENV_brakes_forced_front := FALSE\n        ||\n           ENV_brakes_forced_back := FALSE\n      ;\n           VIS_detected_track := ENV_TRK |> closure(ENV_next_init)[dom(ENV_object_front_init(lok))]\n        ||\n           VIS_detected_sig_front := {}\n        ||\n           VIS_detected_sig_back := {}\n        ||\n           VIS_detected_points_front := {}\n        ||\n           VIS_detected_obj_front := {}\n        ||\n           VIS_detected_stops_front := {}\n        ||\n           VIS_detected_stops_back := {}\n        ||\n           VIS_detected_border_signs_front := {}\n      ;\n           CTR_allow_forw := VIS_max_detect_dist\n        ||\n           CTR_allow_back := VIS_max_detect_dist\n    END\nOPERATIONS\n  RF_MoveLokBackwards(frnt,prev,back,new_front,new_back,dist) = \n    PRE \n        frnt : ENV_BLOCKS\n      & prev : ENV_BLOCKS\n      & back : ENV_BLOCKS\n      & new_front : ENV_BLOCKS\n      & new_back : ENV_BLOCKS\n      & dist : INTEGER\n    THEN\n      SELECT \n          ENV_derailed(lok) = FALSE\n        & ENV_brakes_forced_back = FALSE\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & lok : dom(ENV_object_back)\n        & back : dom(ENV_object_back(lok))\n        & (\n           prev |-> back : ENV_TRK\n           or\n           (\n            back /: ran(ENV_next)\n            &\n            prev = back\n           )\n          )\n        & (\n           new_back |-> back : closure(ENV_next)\n           or\n           #(p1,p2).(\n            p1 : ENV_BLOCKS\n            &\n            p2 : ENV_BLOCKS * ENV_BLOCKS\n            &\n            p1 |-> p2 : ENV_POINTS\n            &\n            new_back |-> p1 : closure(ENV_TRK)\n            &\n            p1 |-> back : closure(ENV_TRK)\n           )\n          )\n        & (\n           (\n            ENV_object_back(lok)(back) < dist\n            &\n            back |-> new_back : closure1((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)\n           )\n           or\n           ENV_object_back(lok)(back) >= dist\n          )\n        & ENV_block_length(new_back) > (IF back = new_back THEN 0 ELSE ENV_block_length(new_back) END) - (dist - ENV_object_back(lok)(back) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_next~) & b |-> new_back : closure1(ENV_next~) & l = ENV_block_length(b))|l))\n        & (IF back = new_back THEN 0 ELSE ENV_block_length(new_back) END) - (dist - ENV_object_back(lok)(back) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_next~) & b |-> new_back : closure1(ENV_next~) & l = ENV_block_length(b))|l)) >= 0\n        & (\n           (\n            ENV_object_front(lok)(frnt) < dist\n            &\n            frnt |-> new_front : closure1((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)\n           )\n           or\n           ENV_object_front(lok)(frnt) >= dist\n          )\n        & ENV_block_length(new_front) > (IF frnt = new_front THEN 0 ELSE ENV_block_length(new_front) END) - (dist - ENV_object_front(lok)(frnt) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next~) & b |-> new_front : closure1(ENV_next~) & l = ENV_block_length(b))|l))\n        & (IF frnt = new_front THEN 0 ELSE ENV_block_length(new_front) END) - (dist - ENV_object_front(lok)(frnt) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next~) & b |-> new_front : closure1(ENV_next~) & l = ENV_block_length(b))|l)) >= 0\n        & dist > 0\n        & !(i1,i2,i3).(\n           (\n            i2 : INTEGER\n            &\n            i1 |-> i2 |-> i3 : ENV_stop_distances_back\n            &\n            i2 - dist <= (IF i3 = brake_shoe THEN 0 ELSE -10 END)\n            &\n            i1 : closure(ENV_next)[(ENV_next~)[{frnt}] \\/ {frnt}]\n            &\n            i3 : {signal_with_train_protect,brake_shoe,undef_point,derailer,human,wagon}\n           )\n           =>\n           dist <= i2\n          )\n        & dist < CTR_allow_back\n      THEN \n          IF ENV_object_back(lok)(back) < dist THEN\n               `Rangierfahrt_KI`.`ENV_SetOccupied`(ENV_occ \\/ {lok |-> new_front} \\/ %b.(b : ENV_BLOCKS & (new_front |-> b : closure1(ENV_next~) & b |-> new_back : closure1(ENV_next~))|lok)~ \\/ {lok |-> new_back})\n            ||\n               `Rangierfahrt_KI`.`ENV_SetObjectBack`(lok,({back} <<| ENV_object_back(lok)) \\/ {new_back |-> (IF back = new_back THEN 0 ELSE ENV_block_length(new_back) END) - (dist - ENV_object_back(lok)(back) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_next~) & b |-> new_back : closure1(ENV_next~) & l = ENV_block_length(b))|l))})\n            ||\n               IF back |-> prev : dom(VIS_detected_sig_back) THEN\n                 `Rangierfahrt_KI`.`VIS_SetDetectedSigBack`(%n.(n : ENV_BLOCKS & back |-> n : dom(VIS_detected_sig_back)|back)~ <<| VIS_detected_sig_back)\n               END\n          ELSE\n            `Rangierfahrt_KI`.`ENV_SetObjectBackOfLokForBlock`(back,ENV_object_back(lok)(back) - dist)\n          END\n        ;\n             IF ENV_object_front(lok)(frnt) < dist THEN\n                  `Rangierfahrt_KI`.`ENV_SetOccupied`(ENV_occ - {lok |-> frnt} - %b.(b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next~) & b |-> new_front : closure1(ENV_next~))|lok)~)\n               ||\n                  `Rangierfahrt_KI`.`ENV_SetObjectFront`(lok,({frnt} <<| ENV_object_front(lok)) \\/ {new_front |-> (IF frnt = new_front THEN 0 ELSE ENV_block_length(new_front) END) - (dist - ENV_object_front(lok)(frnt) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next~) & b |-> new_front : closure1(ENV_next~) & l = ENV_block_length(b))|l))})\n             ELSE\n               `Rangierfahrt_KI`.`ENV_SetObjectFrontOfLokForBlock`(frnt,ENV_object_front(lok)(frnt) - dist)\n             END\n          ||\n             `Rangierfahrt_KI`.`VIS_SetDetectedStopsFront`({j | \n                 #(i1,i2,i3).(\n                  i1 : ENV_BLOCKS\n                  &\n                  i2 : INTEGER\n                  &\n                  i3 : ENV_STOP_REASONS\n                  &\n                  i1 |-> i2 |-> i3 : VIS_detected_stops_front\n                  &\n                  j = i1 |-> i2 + dist |-> i3\n                  &\n                  i2 >= 0\n                 )\n             })\n          ||\n             `Rangierfahrt_KI`.`VIS_SetDetectedStopsBack`({j | \n                 #(i1,i2,i3).(\n                  i1 : ENV_BLOCKS\n                  &\n                  i2 : INTEGER\n                  &\n                  i3 : ENV_STOP_REASONS\n                  &\n                  i1 |-> i2 |-> i3 : VIS_detected_stops_back\n                  &\n                  j = i1 |-> i2 - dist |-> i3\n                  &\n                  i2 - dist >= 0\n                 )\n             })\n          ||\n             `Rangierfahrt_KI`.`VIS_SetDetectedBorderSignsFront`({j | \n                 #(d,r).(\n                  d : ENV_BLOCKS * ENV_BLOCKS * INTEGER\n                  &\n                  r : INTEGER\n                  &\n                  d |-> r : VIS_detected_border_signs_front\n                  &\n                  j = d |-> r + dist\n                  &\n                  r - dist >= 0\n                 )\n             })\n        ;\n             CTR_SetAllowFront\n          ||\n             CTR_SetAllowBack\n          ||\n             `Rangierfahrt_KI`.`ENV_SetStopDistancesFront`({j | \n                 #(i1,i2,i3).(\n                  i1 : ENV_BLOCKS\n                  &\n                  i2 : INTEGER\n                  &\n                  i3 : ENV_STOP_REASONS\n                  &\n                  i1 |-> i2 |-> i3 : ENV_stop_distances_front\n                  &\n                  j = i1 |-> i2 + dist |-> i3\n                 )\n             })\n          ||\n             `Rangierfahrt_KI`.`ENV_SetStopDistancesBack`({j | \n                 #(i1,i2,i3).(\n                  i1 : ENV_BLOCKS\n                  &\n                  i2 : INTEGER\n                  &\n                  i3 : ENV_STOP_REASONS\n                  &\n                  i1 |-> i2 |-> i3 : ENV_stop_distances_back\n                  &\n                  j = i1 |-> i2 - dist |-> i3\n                 )\n             })\n        ;\n          IF #(block,d,r).(d : INTEGER & (block |-> d |-> r : ENV_stop_distances_back & block : closure(ENV_next)[((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)[{back}] \\/ {back}] & d <= 0 & r : {signal_with_train_protect,brake_shoe})) THEN\n            `Rangierfahrt_KI`.`ENV_SetBrakesForcedFront`(TRUE)\n          ELSIF #(block,d,r).(d : INTEGER & (block |-> d |-> r : ENV_stop_distances_back & block : closure(ENV_next)[((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)[{back}] \\/ {back}] & d <= 0 & r : {undef_point,derailer})) THEN\n               `Rangierfahrt_KI`.`ENV_SetDerailedForLok`(TRUE)\n            ||\n               `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(TRUE)\n          ELSIF #(block,d,r).(d : INTEGER & (block |-> d |-> r : ENV_stop_distances_back & block : closure(ENV_next)[((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)[{back}] \\/ {back}] & d <= 0 & r : {human,wagon})) THEN\n              `Rangierfahrt_KI`.`ENV_SetDerailed`(ENV_derailed <+ {j|j : ENV_OBJECTS * BOOL & #(i,o,B).(i : ENV_derailed & o = prj1(i) & o /= lok & (o : dom(ENV_object_front) & B : dom(ENV_object_front(o))) & ((IF new_back /= B THEN ENV_block_length(new_back) ELSE 0 END) - ENV_object_front(lok)(new_back)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (new_back |-> b : closure1(ENV_TRK) & b |-> B : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_object_front(o)(B) <= 0 & B |-> ((IF new_back /= B THEN ENV_block_length(new_back) ELSE 0 END) - ENV_object_front(lok)(new_back)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (new_back |-> b : closure1(ENV_TRK) & b |-> B : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_object_front(o)(B) |-> ENV_object_type(o) : ENV_stop_distances_front & j = o |-> TRUE)})\n            ;\n                 `Rangierfahrt_KI`.`ENV_SetDerailedForLok`(TRUE)\n              ||\n                 `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(TRUE)\n          ELSIF #(block,d,r).(d : INTEGER & r : ENV_STOP_REASONS & (block |-> d |-> r : ENV_stop_distances_back & block : closure(ENV_next)[((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)[{back}] \\/ {back}] & d <= 0)) or #(block,d,r).(d : INTEGER & r : ENV_STOP_REASONS & (block |-> d |-> r : ENV_stop_distances_front & block : closure(ENV_next~)[ENV_next[{frnt}] \\/ {frnt}] & d <= 0)) THEN\n            `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(TRUE)\n          ELSE\n               `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(FALSE)\n            ||\n               `Rangierfahrt_KI`.`ENV_SetBrakesForcedFront`(FALSE)\n            ||\n               `Rangierfahrt_KI`.`ENV_SetBrakesForcedBack`(FALSE)\n          END\n      END\n    END;\n  \n  RF_MoveLokForwards(frnt,nxt,back,new_front,new_back,dist) = \n    PRE \n        frnt : ENV_BLOCKS\n      & nxt : ENV_BLOCKS\n      & back : ENV_BLOCKS\n      & new_front : ENV_BLOCKS\n      & new_back : ENV_BLOCKS\n      & dist : INTEGER\n    THEN\n      SELECT \n          ENV_derailed(lok) = FALSE\n        & ENV_brakes_forced_front = FALSE\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & (\n           frnt |-> nxt : ENV_next\n           or\n           (\n            frnt /: dom(ENV_next)\n            &\n            nxt = frnt\n           )\n          )\n        & lok : dom(ENV_object_back)\n        & back : dom(ENV_object_back(lok))\n        & frnt |-> new_front : closure(ENV_next)\n        & (\n           (\n            ENV_block_length(frnt) - ENV_object_front(lok)(frnt) <= dist\n            &\n            frnt |-> new_front : closure1(ENV_next)\n           )\n           or\n           ENV_block_length(frnt) - ENV_object_front(lok)(frnt) > dist\n          )\n        & ENV_block_length(new_front) > (dist - (ENV_block_length(frnt) - ENV_object_front(lok)(frnt)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next) & b |-> new_front : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF frnt = new_front THEN ENV_block_length(frnt) ELSE 0 END)\n        & (dist - (ENV_block_length(frnt) - ENV_object_front(lok)(frnt)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next) & b |-> new_front : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF frnt = new_front THEN ENV_block_length(frnt) ELSE 0 END) >= 0\n        & (\n           (\n            ENV_block_length(back) - ENV_object_back(lok)(back) <= dist\n            &\n            back |-> new_back : closure1(ENV_next)\n           )\n           or\n           ENV_block_length(back) - ENV_object_back(lok)(back) > dist\n          )\n        & ENV_block_length(new_back) > (dist - (ENV_block_length(back) - ENV_object_back(lok)(back)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_next) & b |-> new_back : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF back = new_back THEN ENV_block_length(back) ELSE 0 END)\n        & (dist - (ENV_block_length(back) - ENV_object_back(lok)(back)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_next) & b |-> new_back : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF back = new_back THEN ENV_block_length(back) ELSE 0 END) >= 0\n        & dist > 0\n        & !(i1,i2,i3).(\n           (\n            i2 : INTEGER\n            &\n            i1 |-> i2 |-> i3 : ENV_stop_distances_front\n            &\n            i2 - dist <= (IF i3 = brake_shoe THEN 0 ELSE -10 END)\n            &\n            i1 : closure(ENV_next~)[ENV_next[{frnt}] \\/ {frnt}]\n            &\n            i3 : ENV_STOP_REASONS - {signal_without_train_protect}\n           )\n           =>\n           dist <= i2\n          )\n        & dist < CTR_allow_forw\n      THEN \n          IF ENV_block_length(frnt) - ENV_object_front(lok)(frnt) <= dist THEN\n               `Rangierfahrt_KI`.`ENV_SetOccupied`(ENV_occ \\/ {lok |-> new_back} \\/ %b.(b : ENV_BLOCKS & (new_back |-> b : closure1(ENV_next) & b |-> new_front : closure1(ENV_next))|lok)~ \\/ {lok |-> new_front})\n            ||\n               `Rangierfahrt_KI`.`ENV_SetObjectFront`(lok,({frnt} <<| ENV_object_front(lok)) \\/ {new_front |-> (dist - (ENV_block_length(frnt) - ENV_object_front(lok)(frnt)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next) & b |-> new_front : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF frnt = new_front THEN ENV_block_length(frnt) ELSE 0 END)})\n            ||\n               IF frnt |-> nxt : dom(VIS_detected_sig_front) THEN\n                 `Rangierfahrt_KI`.`VIS_SetDetectedSigFront`(%n.(n : ENV_BLOCKS & frnt |-> n : dom(VIS_detected_sig_front)|frnt)~ <<| VIS_detected_sig_front)\n               END\n            ||\n               IF #b.(b : ENV_BLOCKS & frnt |-> (nxt |-> b) : dom(VIS_detected_points_front)) or #b.(b : ENV_BLOCKS & frnt |-> (b |-> nxt) : dom(VIS_detected_points_front)) THEN\n                 `Rangierfahrt_KI`.`VIS_SetDetectedPointsFront`(%(n1,n2).(n1 : ENV_BLOCKS & n2 : ENV_BLOCKS & frnt |-> (n1 |-> n2) : dom(VIS_detected_points_front)|frnt)~ <<| VIS_detected_points_front)\n               END\n          ELSE\n            `Rangierfahrt_KI`.`ENV_SetObjectFrontOfLokForBlock`(frnt,ENV_object_front(lok)(frnt) + dist)\n          END\n        ;\n             IF ENV_object_back(lok)(back) + dist >= ENV_block_length(back) THEN\n                  `Rangierfahrt_KI`.`ENV_SetOccupied`(ENV_occ - {lok |-> back} - %b.(b : ENV_BLOCKS & (back |-> b : closure1(ENV_next) & b |-> new_back : closure1(ENV_next))|lok)~)\n               ||\n                  `Rangierfahrt_KI`.`ENV_SetObjectBack`(lok,({back} <<| ENV_object_back(lok)) \\/ {new_back |-> (dist - (ENV_block_length(back) - ENV_object_back(lok)(back)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_next) & b |-> new_back : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF back = new_back THEN ENV_block_length(back) ELSE 0 END)})\n             ELSE\n               `Rangierfahrt_KI`.`ENV_SetObjectBackOfLokForBlock`(back,ENV_object_back(lok)(back) + dist)\n             END\n          ||\n             `Rangierfahrt_KI`.`VIS_SetDetectedStopsFront`({j | \n                 #(i1,i2,i3).(\n                  i1 : ENV_BLOCKS\n                  &\n                  i2 : INTEGER\n                  &\n                  i3 : ENV_STOP_REASONS\n                  &\n                  i1 |-> i2 |-> i3 : VIS_detected_stops_front\n                  &\n                  j = i1 |-> i2 - dist |-> i3\n                  &\n                  i2 - dist >= 0\n                 )\n             })\n          ||\n             `Rangierfahrt_KI`.`VIS_SetDetectedStopsBack`({j | \n                 #(i1,i2,i3).(\n                  i1 : ENV_BLOCKS\n                  &\n                  i2 : INTEGER\n                  &\n                  i3 : ENV_STOP_REASONS\n                  &\n                  i1 |-> i2 |-> i3 : VIS_detected_stops_back\n                  &\n                  j = i1 |-> i2 + dist |-> i3\n                  &\n                  i2 >= 0\n                 )\n             })\n          ||\n             `Rangierfahrt_KI`.`VIS_SetDetectedBorderSignsFront`({j | \n                 #(d,r).(\n                  d : ENV_BLOCKS * ENV_BLOCKS * INTEGER\n                  &\n                  r : INTEGER\n                  &\n                  d |-> r : VIS_detected_border_signs_front\n                  &\n                  j = d |-> r - dist\n                  &\n                  r - dist >= 0\n                 )\n             })\n        ;\n             CTR_SetAllowFront\n          ||\n             CTR_SetAllowBack\n          ||\n             `Rangierfahrt_KI`.`ENV_SetStopDistancesFront`({j | \n                 #(i1,i2,i3).(\n                  i1 : ENV_BLOCKS\n                  &\n                  i2 : INTEGER\n                  &\n                  i3 : ENV_STOP_REASONS\n                  &\n                  i1 |-> i2 |-> i3 : ENV_stop_distances_front\n                  &\n                  j = i1 |-> i2 - dist |-> i3\n                 )\n             })\n          ||\n             `Rangierfahrt_KI`.`ENV_SetStopDistancesBack`({j | \n                 #(i1,i2,i3).(\n                  i1 : ENV_BLOCKS\n                  &\n                  i2 : INTEGER\n                  &\n                  i3 : ENV_STOP_REASONS\n                  &\n                  i1 |-> i2 |-> i3 : ENV_stop_distances_back\n                  &\n                  j = i1 |-> i2 + dist |-> i3\n                 )\n             })\n        ;\n          IF #(block,d,r).(d : INTEGER & (block |-> d |-> r : ENV_stop_distances_front & block : closure(ENV_next~)[ENV_next[{frnt}] \\/ {frnt}] & d <= 0 & r : {signal_with_train_protect,brake_shoe})) THEN\n            `Rangierfahrt_KI`.`ENV_SetBrakesForcedFront`(TRUE)\n          ELSIF #(block,d,r).(d : INTEGER & (block |-> d |-> r : ENV_stop_distances_front & block : closure(ENV_next~)[ENV_next[{frnt}] \\/ {frnt}] & d <= 0 & r : {undef_point,derailer})) THEN\n               `Rangierfahrt_KI`.`ENV_SetDerailedForLok`(TRUE)\n            ||\n               `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(TRUE)\n          ELSIF #(block,d,r).(d : INTEGER & (block |-> d |-> r : ENV_stop_distances_front & block : closure(ENV_next~)[ENV_next[{frnt}] \\/ {frnt}] & d <= 0 & r : {human,wagon})) THEN\n              `Rangierfahrt_KI`.`ENV_SetDerailed`(ENV_derailed <+ {j|j : ENV_OBJECTS * BOOL & #(o,B).(o : dom(ENV_derailed) & o /= lok & (o : dom(ENV_object_back) & B : dom(ENV_object_back(o))) & ((((IF new_front /= B THEN ENV_block_length(new_front) ELSE 0 END) - ENV_object_front(lok)(new_front)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (new_front |-> b : closure1(ENV_TRK) & b |-> B : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_object_back(o)(B) <= 0 & B |-> ((IF new_front /= B THEN ENV_block_length(new_front) ELSE 0 END) - ENV_object_front(lok)(new_front)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (new_front |-> b : closure1(ENV_TRK) & b |-> B : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_object_back(o)(B) |-> ENV_object_type(o) : ENV_stop_distances_front) or #(B0,B2).(B0 : ENV_BLOCKS & B2 : ENV_BLOCKS & (((B0 |-> (B |-> B2) : ENV_POINTS & ENV_object_back(o)(B) <= ENV_border_signs(B0 |-> (B |-> B2))) or (B0 |-> (B2 |-> B) : ENV_POINTS & ENV_object_back(o)(B) <= ENV_border_signs(B0 |-> (B2 |-> B)))) & ((IF new_front /= B2 THEN ENV_block_length(new_front) ELSE 0 END) - ENV_object_front(lok)(new_front)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (new_front |-> b : closure1(ENV_TRK) & b |-> B2 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_object_back(o)(B) <= 0 & B2 |-> ((IF new_front /= B2 THEN ENV_block_length(new_front) ELSE 0 END) - ENV_object_front(lok)(new_front)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (new_front |-> b : closure1(ENV_TRK) & b |-> B2 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_object_back(o)(B) |-> ENV_object_type(o) : ENV_stop_distances_front))) & j = o |-> TRUE)})\n            ;\n                 `Rangierfahrt_KI`.`ENV_SetDerailedForLok`(TRUE)\n              ||\n                 `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(TRUE)\n          ELSIF #(block,d,r).(d : INTEGER & r : ENV_STOP_REASONS & (block |-> d |-> r : ENV_stop_distances_front & block : closure(ENV_next~)[ENV_next[{frnt}] \\/ {frnt}] & d <= 0)) or #(block,d,r).(d : INTEGER & r : ENV_STOP_REASONS & (block |-> d |-> r : ENV_stop_distances_back & block : closure(ENV_next)[((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)[{back}] \\/ {back}] & d <= 0)) THEN\n            `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(TRUE)\n          ELSE\n               `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(FALSE)\n            ||\n               `Rangierfahrt_KI`.`ENV_SetBrakesForcedFront`(FALSE)\n            ||\n               `Rangierfahrt_KI`.`ENV_SetBrakesForcedBack`(FALSE)\n          END\n      END\n    END;\n  \n  ENV_StartMovePoint(Block,N1,N2) = \n    PRE \n        Block : ENV_BLOCKS\n      & N1 : ENV_BLOCKS\n      & N2 : ENV_BLOCKS\n    THEN\n      ANY frnt,back,dist\n      WHERE \n          dist : INTEGER\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & lok : dom(ENV_object_back)\n        & back : dom(ENV_object_back(lok))\n        & Block |-> (N1 |-> N2) : ENV_POINTS\n        & !o.(\n           (\n            o : ENV_OBJECTS\n            &\n            o |-> Block : ENV_occ\n           )\n           =>\n           (\n            (o |-> N1) /: ENV_occ\n            &\n            (o |-> N2) /: ENV_occ\n           )\n          )\n        & ({Wn1,Wn2} /\\ ENV_point_states[{Block |-> (N1 |-> N2)}]) /= {}\n        & (\n           frnt |-> Block : closure(ENV_next)\n           =>\n           dist = ((IF frnt /= N1 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> N1 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0\n          )\n        & (\n           not(frnt |-> Block : closure(ENV_next))\n           =>\n           dist = ((IF back /= Block THEN ENV_block_length(back) ELSE 0 END) + ENV_object_back(lok)(back) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_TRK~) & b |-> Block : closure1(ENV_TRK~) & l = ENV_block_length(b))|l)) - (ENV_block_length(Block) - 1)\n          )\n      THEN\n           ENV_point_states(Block |-> (N1 |-> N2)),ENV_old_point_states(Block |-> (N1 |-> N2)),ENV_stop_positions_front,ENV_stop_positions_back := undef,ENV_point_states(Block |-> (N1 |-> N2)),ENV_stop_positions_front \\/ {N1 |-> 0,N2 |-> 0} * {undef_point},ENV_stop_positions_back \\/ {Block |-> ENV_block_length(Block) - 1 |-> undef_point}\n        ||\n           IF Block : dom(ENV_next) & frnt |-> Block : closure(ENV_next) THEN\n             ENV_stop_distances_front := ENV_stop_distances_front \\/ {ENV_next(Block) |-> dist |-> undef_point}\n           ELSIF Block : dom(ENV_next) & back |-> ENV_next(Block) : closure(ENV_next~) THEN\n             ENV_stop_distances_back := ENV_stop_distances_back \\/ {Block |-> dist |-> undef_point}\n           END\n      END\n    END;\n  \n  ENV_EndMovePoint(Block,N1,N2) = \n    PRE \n        Block : ENV_BLOCKS\n      & N1 : ENV_BLOCKS\n      & N2 : ENV_BLOCKS\n    THEN\n      ANY frnt,back,dist,new_ENV_next\n      WHERE \n          dist : INTEGER\n        & new_ENV_next : ENV_BLOCKS\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & lok : dom(ENV_object_back)\n        & back : dom(ENV_object_back(lok))\n        & Block |-> (N1 |-> N2) : ENV_POINTS\n        & ENV_point_states(Block |-> (N1 |-> N2)) = undef\n        & (\n           (\n            ENV_old_point_states(Block |-> (N1 |-> N2)) = Wn1\n            &\n            new_ENV_next = N2\n           )\n           or\n           (\n            ENV_old_point_states(Block |-> (N1 |-> N2)) = Wn2\n            &\n            new_ENV_next = N1\n           )\n          )\n        & !o.(\n           (\n            o : ENV_OBJECTS\n            &\n            o |-> Block : ENV_occ\n           )\n           =>\n           (\n            (o |-> N1) /: ENV_occ\n            &\n            (o |-> N2) /: ENV_occ\n           )\n          )\n        & (\n           frnt |-> Block : closure(ENV_next)\n           =>\n           dist = ((IF frnt /= N1 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> N1 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0\n          )\n        & (\n           not(frnt |-> Block : closure(ENV_next))\n           =>\n           dist = ((IF back /= Block THEN ENV_block_length(back) ELSE 0 END) + ENV_object_back(lok)(back) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_TRK~) & b |-> Block : closure1(ENV_TRK~) & l = ENV_block_length(b))|l)) - (ENV_block_length(Block) - 1)\n          )\n      THEN\n          ENV_next(Block) := new_ENV_next\n        ;\n             IF ENV_old_point_states(Block |-> (N1 |-> N2)) = Wn1 THEN\n               ENV_point_states(Block |-> (N1 |-> N2)) := Wn2\n             ELSE\n               ENV_point_states(Block |-> (N1 |-> N2)) := Wn1\n             END\n          ||\n             IF frnt |-> Block : closure(ENV_next) THEN\n               ENV_stop_distances_front := {j|j : ENV_BLOCKS * INTEGER * ENV_STOP_REASONS & #(block,d,r).(block : ENV_BLOCKS & d : INTEGER & r : ENV_STOP_REASONS & (block |-> d |-> r : ENV_stop_positions_front & frnt |-> block : closure(ENV_next) & j = block |-> ((IF frnt /= block THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> block : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + d |-> r))} - {N1 |-> dist,N2 |-> dist} * {undef_point}\n             ELSIF back |-> Block : closure(ENV_next~) THEN\n               ENV_stop_distances_back,ENV_stop_positions_back := ENV_stop_distances_back - {Block |-> dist |-> undef_point},ENV_stop_positions_back - {Block |-> ENV_block_length(Block) - 1 |-> undef_point}\n             END\n          ||\n             ENV_stop_positions_front := ENV_stop_positions_front - {N1 |-> 0,N2 |-> 0} * {undef_point}\n      END\n    END;\n  \n  ENV_ActivateDerailer(B1,B2) = \n    PRE \n        B1 : ENV_BLOCKS\n      & B2 : ENV_BLOCKS\n    THEN\n      ANY frnt,back,dist\n      WHERE \n          dist : INTEGER\n        & B1 |-> B2 : ENV_DERAILERS - ENV_active_derailers\n        & not(\n           lok |-> B1 : ENV_occ\n           &\n           lok |-> B2 : ENV_occ\n          )\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & lok : dom(ENV_object_back)\n        & back : dom(ENV_object_back(lok))\n        & (\n           frnt |-> B1 : closure(ENV_next)\n           =>\n           dist = ((IF frnt /= B2 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B2 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0\n          )\n        & (\n           not(frnt |-> B1 : closure(ENV_next))\n           =>\n           dist = ((IF back /= B1 THEN ENV_block_length(back) ELSE 0 END) + ENV_object_back(lok)(back) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_TRK~) & b |-> B1 : closure1(ENV_TRK~) & l = ENV_block_length(b))|l)) - (ENV_block_length(B1) - 1)\n          )\n      THEN\n           ENV_active_derailers,ENV_signal_states,ENV_stop_positions_front,ENV_stop_positions_back := ENV_active_derailers \\/ {B1 |-> B2},ENV_signal_states <+ {B1 |-> B2,B2 |-> B1} * {Sh0},ENV_stop_positions_front \\/ {B2 |-> 0 |-> derailer},ENV_stop_positions_back \\/ {B1 |-> ENV_block_length(B1) - 1 |-> derailer}\n        ||\n           IF frnt |-> B1 : closure(ENV_next) THEN\n             ENV_stop_distances_front := ENV_stop_distances_front \\/ {B2 |-> dist |-> derailer}\n           ELSIF back |-> B2 : closure(ENV_next~) THEN\n             ENV_stop_distances_back := ENV_stop_distances_back \\/ {B1 |-> dist |-> derailer}\n           END\n      END\n    END;\n  \n  ENV_DeactivateDerailer(B1,B2) = \n    PRE \n        B1 : ENV_BLOCKS\n      & B2 : ENV_BLOCKS\n    THEN\n      ANY frnt,back,dist\n      WHERE \n          dist : INTEGER\n        & B1 |-> B2 : ENV_active_derailers\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & lok : dom(ENV_object_back)\n        & back : dom(ENV_object_back(lok))\n        & (\n           frnt |-> B1 : closure(ENV_next)\n           =>\n           dist = ((IF frnt /= B2 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B2 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0\n          )\n        & (\n           not(frnt |-> B1 : closure(ENV_next))\n           =>\n           dist = ((IF back /= B1 THEN ENV_block_length(back) ELSE 0 END) + ENV_object_back(lok)(back) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_TRK~) & b |-> B1 : closure1(ENV_TRK~) & l = ENV_block_length(b))|l)) - (ENV_block_length(B1) - 1)\n          )\n      THEN\n           ENV_active_derailers,ENV_signal_states,ENV_stop_positions_front,ENV_stop_positions_back := ENV_active_derailers - {B1 |-> B2},ENV_signal_states <+ {B1 |-> B2,B2 |-> B1} * {Wn7},ENV_stop_positions_front - {B2 |-> 0 |-> derailer},ENV_stop_positions_back - {B1 |-> ENV_block_length(B1) - 1 |-> derailer}\n        ||\n           IF frnt |-> B1 : closure(ENV_next) THEN\n             ENV_stop_distances_front := ENV_stop_distances_front - {B2 |-> dist |-> derailer}\n           ELSIF back |-> B2 : closure(ENV_next~) THEN\n             ENV_stop_distances_back := ENV_stop_distances_back - {B1 |-> dist |-> derailer}\n           END\n      END\n    END;\n  \n  ENV_PlaceBrakeShoe_Front(B,pos) = \n    PRE \n        B : ENV_BLOCKS\n      & pos : INTEGER\n    THEN\n      ANY frnt,dist\n      WHERE \n          dist : INTEGER\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & dist = ((IF frnt /= B THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + pos\n        & dist > 0\n        & B /: dom(ENV_brake_shoes)\n        & pos : 0 .. ENV_block_length(B) - 1\n        & !o.(\n           (\n            o : dom(ENV_object_front)\n            &\n            B : dom(ENV_object_front(o))\n            &\n            not(\n             o : dom(ENV_object_back)\n             &\n             B : dom(ENV_object_back(o))\n            )\n           )\n           =>\n           pos > ENV_object_front(o)(B)\n          )\n        & !o.(\n           (\n            not(\n             o : dom(ENV_object_front)\n             &\n             B : dom(ENV_object_front(o))\n            )\n            &\n            o : dom(ENV_object_back)\n            &\n            B : dom(ENV_object_back(o))\n           )\n           =>\n           pos < ENV_object_back(o)(B)\n          )\n        & !o.(\n           (\n            o : dom(ENV_object_front)\n            &\n            B : dom(ENV_object_front(o))\n            &\n            o : dom(ENV_object_back)\n            &\n            B : dom(ENV_object_back(o))\n           )\n           =>\n           pos /: ENV_object_back(o)(B) .. ENV_object_front(o)(B)\n          )\n      THEN\n        ENV_brake_shoes,ENV_stop_distances_front,ENV_stop_positions_front := ENV_brake_shoes \\/ {B |-> pos},ENV_stop_distances_front \\/ {B |-> dist |-> brake_shoe},ENV_stop_positions_front \\/ {B |-> pos |-> brake_shoe}\n      END\n    END;\n  \n  ENV_RemoveBrakeShoe_Front(B,pos) = \n    PRE \n        B : ENV_BLOCKS\n      & pos : INTEGER\n    THEN\n      ANY frnt,dist\n      WHERE \n          dist : INTEGER\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & dist = ((IF frnt /= B THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + pos\n        & B |-> pos : ENV_brake_shoes\n      THEN\n           ENV_brake_shoes,ENV_stop_distances_front,ENV_stop_positions_front := ENV_brake_shoes - {B |-> pos},ENV_stop_distances_front - {B |-> dist |-> brake_shoe},ENV_stop_positions_front - {B |-> pos |-> brake_shoe}\n        ||\n           IF frnt = B & ENV_object_front(lok)(B) = pos THEN\n             ENV_brakes_forced_front := FALSE\n           END\n      END\n    END;\n  \n  ENV_SwitchSignalToSh0(B1,B2) = \n    PRE \n        B1 : ENV_BLOCKS\n      & B2 : ENV_BLOCKS\n    THEN\n      ANY frnt,B3\n      WHERE \n          B3 : ENV_BLOCKS\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & frnt |-> B1 : closure(ENV_next)\n        & B1 |-> B2 : ENV_next /\\ ENV_SIGNALS - ENV_DERAILERS\n        & (\n           B1 : dom(ENV_POINTS)\n           =>\n           (\n            B1 |-> (B2 |-> B3) : ENV_POINTS\n            or\n            B1 |-> (B3 |-> B2) : ENV_POINTS\n           )\n          )\n        & (\n           not(B1 : dom(ENV_POINTS))\n           =>\n           B2 = B3\n          )\n        & !s.(\n           (\n            s : ENV_SIGNALS\n            &\n            prj1(s) = B1\n           )\n           =>\n           ENV_signal_states(s) = Sh1\n          )\n      THEN\n          ENV_signal_states(B1 |-> B2) := Sh0\n        ;\n          ENV_signal_states(B1 |-> B3),ENV_stop_distances_front,ENV_stop_positions_front := Sh0,ENV_stop_distances_front \\/ {B2 |-> ((IF frnt /= B2 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B2 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0 |-> signal_without_train_protect},ENV_stop_positions_front \\/ {B2 |-> 0,B3 |-> 0} * {signal_without_train_protect}\n      END\n    END;\n  \n  ENV_SwitchSignalToSh1(B1,B2) = \n    PRE \n        B1 : ENV_BLOCKS\n      & B2 : ENV_BLOCKS\n    THEN\n      ANY frnt,B3\n      WHERE \n          B3 : ENV_BLOCKS\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & frnt |-> B1 : closure(ENV_next)\n        & B1 |-> B2 : ENV_next /\\ ENV_SIGNALS - ENV_DERAILERS\n        & (\n           B1 : dom(ENV_POINTS)\n           =>\n           (\n            B1 |-> (B2 |-> B3) : ENV_POINTS\n            or\n            B1 |-> (B3 |-> B2) : ENV_POINTS\n           )\n          )\n        & (\n           not(B1 : dom(ENV_POINTS))\n           =>\n           B2 = B3\n          )\n        & !s.(\n           (\n            s : ENV_SIGNALS\n            &\n            prj1(s) = B1\n           )\n           =>\n           ENV_signal_states(s) = Sh0\n          )\n      THEN\n          ENV_signal_states(B1 |-> B2) := Sh1\n        ;\n          ENV_signal_states(B1 |-> B3),ENV_stop_distances_front,ENV_stop_positions_front := Sh1,ENV_stop_distances_front - {B2 |-> ((IF frnt /= B2 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B2 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0 |-> signal_without_train_protect} - {B3 |-> ((IF frnt /= B3 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B3 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0 |-> signal_without_train_protect},ENV_stop_positions_front - {B2 |-> 0,B3 |-> 0} * {signal_without_train_protect}\n      END\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetOccupied`(new_ENV_occ) = \n    PRE \n        new_ENV_occ : POW(ENV_OBJECTS * ENV_BLOCKS)\n    THEN\n      ENV_occ := new_ENV_occ\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetObjectFront`(O,new_of) = \n    PRE \n        O : ENV_OBJECTS\n      & new_of : POW(ENV_BLOCKS * INTEGER)\n    THEN\n      ENV_object_front(O) := new_of\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetObjectFrontOfLokForBlock`(B,new_of) = \n    PRE \n        B : ENV_BLOCKS\n      & new_of : INTEGER\n    THEN\n      ENV_object_front(lok)(B) := new_of\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetObjectBack`(O,new_ob) = \n    PRE \n        O : ENV_OBJECTS\n      & new_ob : POW(ENV_BLOCKS * INTEGER)\n    THEN\n      ENV_object_back(O) := new_ob\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetObjectBackOfLokForBlock`(B,new_ob) = \n    PRE \n        B : ENV_BLOCKS\n      & new_ob : INTEGER\n    THEN\n      ENV_object_back(lok)(B) := new_ob\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetStopDistancesFront`(new_sd) = \n    PRE \n        new_sd : POW(ENV_BLOCKS * INTEGER * ENV_STOP_REASONS)\n    THEN\n      ENV_stop_distances_front := new_sd\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetStopDistancesBack`(new_sd) = \n    PRE \n        new_sd : POW(ENV_BLOCKS * INTEGER * ENV_STOP_REASONS)\n    THEN\n      ENV_stop_distances_back := new_sd\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetSignalState`(B1,B2,st) = \n    PRE \n        B1 : ENV_BLOCKS\n      & B2 : ENV_BLOCKS\n      & st : ENV_SIGNAL_STATES\n    THEN\n      ENV_signal_states(B1 |-> B2) := st\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetBrakesForcedFront`(b) = \n    PRE \n        b : BOOL\n    THEN\n      ENV_brakes_forced_front := b\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetBrakesForcedBack`(b) = \n    PRE \n        b : BOOL\n    THEN\n      ENV_brakes_forced_back := b\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(b) = \n    PRE \n        b : BOOL\n    THEN\n      ENV_safety_critical := b\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetDerailed`(new_d) = \n    PRE \n        new_d : POW(ENV_OBJECTS * BOOL)\n    THEN\n      ENV_derailed := new_d\n    END;\n  \n  `Rangierfahrt_KI`.`ENV_SetDerailedForLok`(new_d) = \n    PRE \n        new_d : BOOL\n    THEN\n      ENV_derailed(lok) := new_d\n    END;\n  \n  VIS_DetectCorrectObject_Front(reason) = \n    PRE \n        reason : ENV_STOP_REASONS\n    THEN\n      ANY frnt,B0,B_obj,B_gauge,o,dist,P\n      WHERE \n          B0 : ENV_BLOCKS\n        & B_gauge : ENV_BLOCKS\n        & dist : INTEGER\n        & P : ENV_BLOCKS * (ENV_BLOCKS * ENV_BLOCKS)\n        & ENV_derailed(lok) = FALSE\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & (\n           (\n            frnt |-> B_obj : closure(VIS_detected_track)\n            &\n            B_gauge = B_obj\n           )\n           or\n           (\n            frnt |-> B_gauge : closure(VIS_detected_track)\n            &\n            P : ENV_POINTS\n            &\n            P : {B0 |-> (B_obj |-> B_gauge),B0 |-> (B_gauge |-> B_obj)}\n            &\n            B0 |-> B_gauge |-> ENV_border_signs(P) : dom(VIS_detected_border_signs_front)\n            &\n            dist <= VIS_detected_border_signs_front(B0 |-> B_gauge |-> ENV_border_signs(P))\n           )\n          )\n        & o : dom(ENV_object_back)\n        & B_obj : dom(ENV_object_back(o))\n        & o /= lok\n        & (\n           (\n            (\n             frnt /= B_gauge\n             or\n             ENV_object_front(lok)(B_gauge) < ENV_object_back(o)(B_obj)\n            )\n            &\n            dist = ((IF frnt /= B_gauge THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B_gauge : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_object_back(o)(B_obj)\n            &\n            reason = ENV_object_type(o)\n           )\n           or\n           (\n            reason = brake_shoe\n            &\n            B_obj |-> dist |-> reason : ENV_stop_distances_front\n           )\n          )\n        & dist <= VIS_max_detect_dist\n        & (B_gauge |-> dist |-> reason) /: VIS_detected_stops_front\n      THEN\n           IF reason : {human,wagon} THEN\n             VIS_detected_obj_front := VIS_detected_obj_front \\/ {o}\n           END\n        ||\n           VIS_detected_stops_front := VIS_detected_stops_front \\/ {B_gauge |-> dist |-> reason}\n      END\n    END;\n  \n  VIS_DetectDisappearedStopReason_Front(reason) = \n    PRE \n        reason : ENV_STOP_REASONS\n    THEN\n      ANY B,dist\n      WHERE \n          B : ENV_BLOCKS\n        & dist : INTEGER\n        & reason : {human,wagon,brake_shoe}\n        & reason : ran(VIS_detected_stops_front)\n        & B |-> dist |-> reason : VIS_detected_stops_front\n        & (B |-> dist) /: (ENV_stop_distances_front~)[{reason}]\n        & dist <= VIS_max_detect_dist\n      THEN\n        VIS_detected_stops_front := VIS_detected_stops_front - {B |-> dist |-> reason}\n      END\n    END;\n  \n  VIS_DetectCorrectSignal_Front(B1,B2) = \n    PRE \n        B1 : ENV_BLOCKS\n      & B2 : ENV_BLOCKS\n    THEN\n      ANY frnt,dist,st\n      WHERE \n          dist : INTEGER\n        & st : ENV_SIGNAL_STATES\n        & ENV_derailed(lok) = FALSE\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & frnt |-> B1 : closure(VIS_detected_track)\n        & frnt |-> B2 : closure1(VIS_detected_track)\n        & B1 |-> B2 : ENV_SIGNALS - ENV_TRK~\n        & !s.(\n           (\n            s : ENV_SIGNALS\n            &\n            prj1(s) = B1\n           )\n           =>\n           ENV_signal_states(s) = st\n          )\n        & (\n           (B1 |-> B2) /: dom(VIS_detected_sig_front)\n           or\n           VIS_detected_sig_front(B1 |-> B2) /= st\n          )\n        & dist = ((IF frnt /= B2 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B2 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0\n        & dist <= VIS_max_detect_dist\n      THEN\n           VIS_detected_sig_front(B1 |-> B2) := st\n        ||\n           IF st = Sh0 THEN\n             VIS_detected_stops_front := VIS_detected_stops_front \\/ {B2 |-> dist |-> signal_without_train_protect}\n           ELSE\n             VIS_detected_stops_front := VIS_detected_stops_front - {B2 |-> dist |-> signal_without_train_protect}\n           END\n        ||\n           IF st = Sh1 THEN\n                `Rangierfahrt_KI`.`ENV_SetSafetyCritical`(FALSE)\n             ||\n                `Rangierfahrt_KI`.`ENV_SetStopDistancesFront`({i | \n                    i : ENV_stop_distances_front\n                  & prj2(prj1(i)) >= 0\n                })\n           END\n      END\n    END;\n  \n  VIS_DetectWrongSignal_Front(B,st,dist) = \n    PRE \n        B : ENV_BLOCKS\n      & st : ENV_SIGNAL_STATES\n      & dist : INTEGER\n    THEN\n      ANY frnt\n      WHERE \n          ENV_derailed(lok) = FALSE\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & frnt |-> B : closure(VIS_detected_track)\n        & dist : NATURAL1\n        & (\n           (\n            ENV_block_length(frnt) - ENV_object_front(lok)(frnt) <= dist\n            &\n            frnt |-> B : closure1(ENV_next)\n           )\n           or\n           ENV_block_length(frnt) - ENV_object_front(lok)(frnt) > dist\n          )\n        & ENV_block_length(B) > (dist - (ENV_block_length(frnt) - ENV_object_front(lok)(frnt)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next) & b |-> B : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF frnt = B THEN ENV_block_length(frnt) ELSE 0 END)\n        & (dist - (ENV_block_length(frnt) - ENV_object_front(lok)(frnt)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next) & b |-> B : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF frnt = B THEN ENV_block_length(frnt) ELSE 0 END) >= 0\n        & dist <= VIS_max_detect_dist\n      THEN\n        IF st = Sh0 THEN\n          VIS_detected_stops_front := VIS_detected_stops_front \\/ {B |-> dist |-> signal_without_train_protect}\n        ELSE\n          VIS_detected_stops_front := VIS_detected_stops_front - {B |-> dist |-> signal_without_train_protect}\n        END\n      END\n    END;\n  \n  VIS_DetectCorrectSignal_Back(B1,B2) = \n    PRE \n        B1 : ENV_BLOCKS\n      & B2 : ENV_BLOCKS\n    THEN\n      ANY back,dist,st\n      WHERE \n          dist : INTEGER\n        & st : ENV_SIGNAL_STATES\n        & ENV_derailed(lok) = FALSE\n        & lok : dom(ENV_object_back)\n        & back : dom(ENV_object_back(lok))\n        & back |-> B1 : closure1(VIS_detected_track~)\n        & back |-> B2 : closure(VIS_detected_track~)\n        & B2 |-> B1 : ENV_SIGNALS - ENV_TRK\n        & (\n           st = Sh0\n           =>\n           !s.(\n            (\n             s : ENV_SIGNALS\n             &\n             prj1(s) = B1\n            )\n            =>\n            ENV_signal_states(s) = st\n           )\n          )\n        & (\n           not(st = Sh0)\n           =>\n           #s.(\n            s : ENV_SIGNALS\n            &\n            prj1(s) = B1\n            &\n            ENV_signal_states(s) = st\n           )\n          )\n        & (\n           (B2 |-> B1) /: dom(VIS_detected_sig_back)\n           or\n           VIS_detected_sig_back(B2 |-> B1) /= st\n          )\n        & dist = ((IF back /= B1 THEN ENV_block_length(back) ELSE 0 END) + ENV_object_back(lok)(back) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_TRK~) & b |-> B1 : closure1(ENV_TRK~) & l = ENV_block_length(b))|l)) - (ENV_block_length(B1) - 1)\n        & dist <= VIS_max_detect_dist\n      THEN\n           VIS_detected_sig_back(B2 |-> B1) := st\n        ||\n           IF st = Sh0 THEN\n             VIS_detected_stops_back := VIS_detected_stops_back \\/ {B2 |-> dist |-> signal_without_train_protect}\n           ELSE\n             VIS_detected_stops_back := VIS_detected_stops_back - {B2 |-> dist |-> signal_without_train_protect}\n           END\n      END\n    END;\n  \n  VIS_DetectWrongSignal_Back(B,st,dist) = \n    PRE \n        B : ENV_BLOCKS\n      & st : ENV_SIGNAL_STATES\n      & dist : INTEGER\n    THEN\n      ANY back\n      WHERE \n          ENV_derailed(lok) = FALSE\n        & lok : dom(ENV_object_back)\n        & back : dom(ENV_object_back(lok))\n        & back |-> B : closure(VIS_detected_track~)\n        & dist : NATURAL1\n        & (\n           (\n            ENV_object_back(lok)(back) < dist\n            &\n            back |-> B : closure1((ENV_next \\/ {nn|nn : ENV_BLOCKS * ENV_BLOCKS & #(px1,px2,px3).(px1 : ENV_BLOCKS & px2 : ENV_BLOCKS & px3 : ENV_BLOCKS & (px1 |-> (px2 |-> px3) : ENV_POINTS & ((ENV_point_states(px1 |-> (px2 |-> px3)) = Wn2 & nn = px1 |-> px2) or (ENV_point_states(px1 |-> (px2 |-> px3)) = Wn1 & nn = px1 |-> px3) or (ENV_next(px1) = px2 & nn = px1 |-> px3) or (ENV_next(px1) = px3 & nn = px1 |-> px2))))})~)\n           )\n           or\n           ENV_object_back(lok)(back) >= dist\n          )\n        & ENV_block_length(B) > (IF back = B THEN 0 ELSE ENV_block_length(B) END) - (dist - ENV_object_back(lok)(back) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_next~) & b |-> B : closure1(ENV_next~) & l = ENV_block_length(b))|l))\n        & (IF back = B THEN 0 ELSE ENV_block_length(B) END) - (dist - ENV_object_back(lok)(back) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (back |-> b : closure1(ENV_next~) & b |-> B : closure1(ENV_next~) & l = ENV_block_length(b))|l)) >= 0\n        & dist <= VIS_max_detect_dist\n      THEN\n        IF st = Sh0 THEN\n          VIS_detected_stops_back := VIS_detected_stops_back \\/ {B |-> dist |-> signal_without_train_protect}\n        ELSE\n          VIS_detected_stops_back := VIS_detected_stops_back - {B |-> dist |-> signal_without_train_protect}\n        END\n      END\n    END;\n  \n  VIS_DetectCorrectPointPosition_Front(B1,B2,B3,st) = \n    PRE \n        B1 : ENV_BLOCKS\n      & B2 : ENV_BLOCKS\n      & B3 : ENV_BLOCKS\n      & st : ENV_POINT_STATES\n    THEN\n      ANY frnt,dist,old_ENV_next,new_ENV_next,old_detected_stops_front,old_detected_sig_front\n      WHERE \n          dist : INTEGER\n        & old_ENV_next : ENV_BLOCKS\n        & new_ENV_next : ENV_BLOCKS\n        & old_detected_stops_front : POW(ENV_STOP_REASONS)\n        & old_detected_sig_front : POW(ENV_SIGNAL_STATES)\n        & ENV_derailed(lok) = FALSE\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & frnt |-> B1 : closure(VIS_detected_track)\n        & B1 |-> (B2 |-> B3) : ENV_POINTS\n        & ENV_point_states(B1 |-> (B2 |-> B3)) = st\n        & (\n           (B1 |-> (B2 |-> B3)) /: dom(VIS_detected_points_front)\n           or\n           VIS_detected_points_front(B1 |-> (B2 |-> B3)) /= st\n          )\n        & B1 |-> new_ENV_next : ENV_next\n        & (\n           (\n            B2 = old_ENV_next\n            &\n            B3 = new_ENV_next\n           )\n           or\n           (\n            B2 = new_ENV_next\n            &\n            B3 = old_ENV_next\n           )\n          )\n        & old_detected_stops_front = VIS_detected_stops_front[{old_ENV_next |-> dist}] /\\ {signal_with_train_protect,signal_without_train_protect}\n        & old_detected_sig_front = VIS_detected_sig_front[{B1 |-> old_ENV_next}]\n        & dist = ((IF frnt /= B2 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B2 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + 0\n        & dist <= VIS_max_detect_dist\n      THEN\n          VIS_detected_track := ENV_TRK |> (closure(ENV_next)[{frnt}] \\/ closure(ENV_next~)[{frnt}])\n        ;\n             VIS_detected_sig_front := closure(VIS_detected_track) <| VIS_detected_sig_front\n          ||\n             VIS_detected_stops_front := closure(VIS_detected_track)[{frnt}] <| dom(VIS_detected_stops_front) <| VIS_detected_stops_front\n          ||\n             VIS_detected_points_front := (closure(VIS_detected_track)[{frnt}] <| dom(VIS_detected_points_front) <| VIS_detected_points_front) |>> {undef}\n          ||\n             VIS_detected_obj_front := {o | \n                 o : VIS_detected_obj_front\n               & o : dom(ENV_object_back)\n               & #(B,B_gauge).(\n                  B_gauge : ENV_BLOCKS\n                  &\n                  B : dom(ENV_object_back(o))\n                  &\n                  (\n                   frnt |-> B : closure(VIS_detected_track)\n                   or\n                   (\n                    B1 |-> B_gauge |-> ENV_border_signs(B1 |-> (B2 |-> B3)) : dom(VIS_detected_border_signs_front)\n                    &\n                    ((IF frnt /= B THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_object_back(o)(B) <= VIS_detected_border_signs_front(B1 |-> B_gauge |-> ENV_border_signs(B1 |-> (B2 |-> B3)))\n                   )\n                  )\n                 )\n             }\n        ;\n          VIS_detected_points_front(B1 |-> (B2 |-> B3)) := st\n        ;\n             IF old_detected_stops_front /= {} THEN\n               VIS_detected_stops_front := (VIS_detected_stops_front \\/ {new_ENV_next |-> dist} * old_detected_stops_front) - {old_ENV_next |-> dist} * old_detected_stops_front\n             END\n          ||\n             IF old_detected_sig_front /= {} & (B1 |-> new_ENV_next) /: dom(VIS_detected_sig_front) THEN\n               VIS_detected_sig_front := (VIS_detected_sig_front \\/ {B1 |-> new_ENV_next} * old_detected_sig_front) - {B1 |-> old_ENV_next} * old_detected_sig_front\n             END\n        ;\n             IF st = undef THEN\n               VIS_detected_stops_front := VIS_detected_stops_front \\/ {new_ENV_next |-> dist |-> undef_point}\n             ELSE\n               VIS_detected_stops_front := VIS_detected_stops_front - {new_ENV_next |-> dist |-> undef_point}\n             END\n          ||\n             IF B1 |-> B2 |-> ENV_border_signs(B1 |-> (B2 |-> B3)) : dom(VIS_detected_border_signs_front) & (B1 |-> B2) /: VIS_detected_track THEN\n               VIS_detected_border_signs_front := ({B1 |-> B2 |-> ENV_border_signs(B1 |-> (B2 |-> B3))} <<| VIS_detected_border_signs_front) \\/ {B1 |-> B3 |-> ENV_border_signs(B1 |-> (B2 |-> B3)) |-> VIS_detected_border_signs_front(B1 |-> B2 |-> ENV_border_signs(B1 |-> (B2 |-> B3)))}\n             ELSIF B1 |-> B3 |-> ENV_border_signs(B1 |-> (B2 |-> B3)) : dom(VIS_detected_border_signs_front) & (B1 |-> B3) /: VIS_detected_track THEN\n               VIS_detected_border_signs_front := ({B1 |-> B3 |-> ENV_border_signs(B1 |-> (B2 |-> B3))} <<| VIS_detected_border_signs_front) \\/ {B1 |-> B2 |-> ENV_border_signs(B1 |-> (B2 |-> B3)) |-> VIS_detected_border_signs_front(B1 |-> B3 |-> ENV_border_signs(B1 |-> (B2 |-> B3)))}\n             END\n      END\n    END;\n  \n  VIS_DetectWrongPointPosition_Front(B,st,dist) = \n    PRE \n        B : ENV_BLOCKS\n      & st : ENV_POINT_STATES\n      & dist : INTEGER\n    THEN\n      ANY frnt\n      WHERE \n          ENV_derailed(lok) = FALSE\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & frnt |-> B : closure(VIS_detected_track)\n        & dist : NATURAL1\n        & (\n           (\n            ENV_block_length(frnt) - ENV_object_front(lok)(frnt) <= dist\n            &\n            frnt |-> B : closure1(ENV_next)\n           )\n           or\n           ENV_block_length(frnt) - ENV_object_front(lok)(frnt) > dist\n          )\n        & ENV_block_length(B) > (dist - (ENV_block_length(frnt) - ENV_object_front(lok)(frnt)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next) & b |-> B : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF frnt = B THEN ENV_block_length(frnt) ELSE 0 END)\n        & (dist - (ENV_block_length(frnt) - ENV_object_front(lok)(frnt)) - SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_next) & b |-> B : closure1(ENV_next) & l = ENV_block_length(b))|l)) + (IF frnt = B THEN ENV_block_length(frnt) ELSE 0 END) >= 0\n        & dist <= VIS_max_detect_dist\n      THEN\n        IF st = undef THEN\n          VIS_detected_stops_front := VIS_detected_stops_front \\/ {B |-> dist |-> undef_point}\n        ELSE\n          VIS_detected_stops_front := VIS_detected_stops_front - {B |-> dist |-> undef_point}\n        END\n      END\n    END;\n  \n  VIS_DetectCorrectBorderSign_Front(P) = \n    PRE \n        P : ENV_BLOCKS * (ENV_BLOCKS * ENV_BLOCKS)\n    THEN\n      ANY frnt,B0,B1,B2,dist\n      WHERE \n          B0 : ENV_BLOCKS\n        & B1 : ENV_BLOCKS\n        & B2 : ENV_BLOCKS\n        & dist : INTEGER\n        & ENV_derailed(lok) = FALSE\n        & P : ENV_POINTS\n        & P : {B0 |-> (B1 |-> B2),B0 |-> (B2 |-> B1)}\n        & lok : dom(ENV_object_front)\n        & frnt : dom(ENV_object_front(lok))\n        & frnt |-> B1 : closure(VIS_detected_track)\n        & (B0 |-> B1 |-> ENV_border_signs(P)) /: dom(VIS_detected_border_signs_front)\n        & dist = ((IF frnt /= B1 THEN ENV_block_length(frnt) ELSE 0 END) - ENV_object_front(lok)(frnt)) + SIGMA(l,b).(l : INTEGER & b : ENV_BLOCKS & (frnt |-> b : closure1(ENV_TRK) & b |-> B1 : closure1(ENV_TRK) & l = ENV_block_length(b))|l) + ENV_border_signs(P)\n        & dist >= 0\n        & dist <= VIS_max_detect_dist\n      THEN\n        VIS_detected_border_signs_front := VIS_detected_border_signs_front \\/ {B0 |-> B1 |-> ENV_border_signs(P) |-> dist}\n      END\n    END;\n  \n  VIS_DetectCorrectTrack = \n    ANY frnt\n    WHERE \n        lok : dom(ENV_object_front)\n      & frnt : dom(ENV_object_front(lok))\n      & #B.(\n         B : ENV_BLOCKS\n         &\n         (\n          frnt |-> B : closure(ENV_next)\n          or\n          frnt |-> B : closure(ENV_next~)\n         )\n         &\n         B /: (dom(VIS_detected_track) \\/ ran(VIS_detected_track))\n        )\n    THEN\n        VIS_detected_track := ENV_TRK |> (closure(ENV_next)[{frnt}] \\/ closure(ENV_next~)[{frnt}])\n      ;\n        VIS_detected_sig_front,VIS_detected_stops_front,VIS_detected_points_front := closure(VIS_detected_track) <| VIS_detected_sig_front,closure(VIS_detected_track)[{frnt}] <| dom(VIS_detected_stops_front) <| VIS_detected_stops_front,(closure(VIS_detected_track)[{frnt}] <| dom(VIS_detected_points_front) <| VIS_detected_points_front) |>> {undef}\n    END;\n  \n  `Rangierfahrt_KI`.`VIS_SetDetectedStopsFront`(new) = \n    PRE \n        new : POW(ENV_BLOCKS * INTEGER * ENV_STOP_REASONS)\n    THEN\n      VIS_detected_stops_front := new\n    END;\n  \n  `Rangierfahrt_KI`.`VIS_SetDetectedStopsBack`(new) = \n    PRE \n        new : POW(ENV_BLOCKS * INTEGER * ENV_STOP_REASONS)\n    THEN\n      VIS_detected_stops_back := new\n    END;\n  \n  `Rangierfahrt_KI`.`VIS_SetDetectedSigFront`(new) = \n    PRE \n        new : POW(ENV_BLOCKS * ENV_BLOCKS * ENV_SIGNAL_STATES)\n    THEN\n      VIS_detected_sig_front := new\n    END;\n  \n  `Rangierfahrt_KI`.`VIS_SetDetectedSigBack`(new) = \n    PRE \n        new : POW(ENV_BLOCKS * ENV_BLOCKS * ENV_SIGNAL_STATES)\n    THEN\n      VIS_detected_sig_back := new\n    END;\n  \n  `Rangierfahrt_KI`.`VIS_SetDetectedPointsFront`(new) = \n    PRE \n        new : POW(ENV_BLOCKS * (ENV_BLOCKS * ENV_BLOCKS) * ENV_POINT_STATES)\n    THEN\n      VIS_detected_points_front := new\n    END;\n  \n  `Rangierfahrt_KI`.`VIS_SetDetectedBorderSignsFront`(new) = \n    PRE \n        new : POW(ENV_BLOCKS * ENV_BLOCKS * INTEGER * INTEGER)\n    THEN\n      VIS_detected_border_signs_front := new\n    END;\n  \n  CTR_SetAllowFront = \n    LET relevant_detected_stops BE relevant_detected_stops = VIS_detected_stops_front - (IF CTR_knows_signal_positions = TRUE THEN {s|s : VIS_detected_stops_front & prj1(prj1(s)) /: ran(ENV_SIGNALS) & prj2(prj1(s)) /= 0 & prj2(s) : {signal_with_train_protect,signal_without_train_protect}} ELSE {} END) - (IF CTR_knows_point_positions = TRUE THEN {s|s : VIS_detected_stops_front & prj1(prj1(s)) /: (dom(ran(ENV_POINTS)) \\/ ran(ran(ENV_POINTS))) & prj2(prj1(s)) /= 0 & prj2(s) = undef_point} ELSE {} END)\n    IN\n      IF relevant_detected_stops /= {} THEN\n        CTR_allow_forw := min({min(ran(dom(relevant_detected_stops))),VIS_max_detect_dist})\n      ELSE\n        CTR_allow_forw := VIS_max_detect_dist\n      END\n    END;\n  \n  CTR_IgnoreDetectionFront(detection) = \n    PRE \n        detection : ENV_BLOCKS * INTEGER * ENV_STOP_REASONS\n    THEN\n      SELECT \n          detection : VIS_detected_stops_front\n        & (\n           (\n            CTR_knows_signal_positions = TRUE\n            &\n            detection : VIS_detected_stops_front\n            &\n            prj1(prj1(detection)) /: ran(ENV_SIGNALS)\n            &\n            prj2(prj1(detection)) /= 0\n            &\n            prj2(detection) : {signal_with_train_protect,signal_without_train_protect}\n           )\n           or\n           (\n            CTR_knows_point_positions = TRUE\n            &\n            detection : VIS_detected_stops_front\n            &\n            prj1(prj1(detection)) /: (dom(ran(ENV_POINTS)) \\/ ran(ran(ENV_POINTS)))\n            &\n            prj2(prj1(detection)) /= 0\n            &\n            prj2(detection) = undef_point\n           )\n          )\n      THEN \n        `Rangierfahrt_KI`.`VIS_SetDetectedStopsFront`(VIS_detected_stops_front - {detection})\n      END\n    END;\n  \n  CTR_SetAllowBack = \n    IF VIS_detected_stops_back /= {} THEN\n      CTR_allow_back := min({min(ran(dom(VIS_detected_stops_back))),VIS_max_detect_dist})\n    ELSE\n      CTR_allow_back := VIS_max_detect_dist\n    END\n/* DEFINITIONS\n  PREDICATE stop_reason_passed_back(B,R);\n  PREDICATE back_of_object(obj,back);\n  EXPRESSION position_in_new_block_backwards(curr_block,pos_in_curr,dist,dist_block);\n  PREDICATE back_of_track(back);\n  EXPRESSION front_point_not_ENV_next;\n  PREDICATE stop_reason_passed_front(B,R);\n  EXPRESSION VISB_JSON_FILE;\n  PREDICATE block_after_distance_forwards(curr_block,pos_in_curr,dist,dist_block);\n  EXPRESSION position_in_new_block_forwards(curr_block,pos_in_curr,dist,dist_block);\n  EXPRESSION CUSTOM_GRAPH_NODES;\n  EXPRESSION CUSTOM_GRAPH_EDGES;\n  PREDICATE front_of_track(frnt);\n  PREDICATE front_of_object(obj,frnt);\n  PREDICATE block_after_distance_backwards(curr_block,pos_in_curr,dist,dist_block);\n  EXPRESSION dist_front(frnt,B,dist_in_B);\n  EXPRESSION dist_back(back,B,dist_in_B); */\nEND\n'),[]))
