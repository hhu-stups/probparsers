Package de.prob.core.sablecc;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/
Helpers
  /*
   Formal Syntax as defined in
   https://sicstus.sics.se/sicstus/docs/latest4/html/sicstus.html/ref_002dsyn_002dsyn_002dtok.html#ref_002dsyn_002dsyn_002dtok
  */

  /* layout-char
     These are character codes 0..32, 127..160, 8206..8207, and 8232..8233. This includes ASCII characters
     such as <TAB>, <LFD>, and <SPC>, as well as all characters with Unicode property Pattern_Whitespace
     including the Unicode-specific <LINE SEPARATOR> (8232).
  */
  layout_char = [[[0 .. 32] + [127..160]] + [[8206 .. 8207] + [8232 .. 8233]]];
  // layout_char = 10 | 13;

  /* small-letter
     These are character codes 97..122, i.e. the letters `a' through `z', as well as the non-ASCII character
     codes 170, 186, 223..246, and 248..255.
  */
  small_letter = [[['a'..'z'] + [170 + 186]] + [[223..246] + [248..255]]];

  /* capital-letter
     These are character codes 65..90, i.e. the letters `A' through `Z', as well as the non-ASCII character
     codes 192..214, and 216..222
  */
  capital_letter = [['A' .. 'Z'] + [[192 .. 214] + [216 .. 222]]];

  /* digit
     These are character codes 48..57, i.e. the digits `0' through `9'.
  */
  digit = ['0' .. '9'];

  /* symbol-char
     These are character codes 35, 36, 38, 42, 43, 45..47, 58, 60..64, 92, 94, and 126, i.e. the characters:
     + - * / \ ^ < > = ~ : . ? @ # $ &
  */
  symbol_char = [[[[['+' + '-'] + ['*' + '/']] + [['\' + '^'] + ['<' + '>']]] + [[['=' + '~'] + [':' + '.']] + [['?' + '@'] + ['#' + '$']]]] + '&'];

  /* solo-char
     These are character codes 33 and 59 i.e. the characters `!' and `;'
  */
  solo_char = ['!' + ';'];

  /* punctuation-char
     These are character codes 37, 40, 41, 44, 91, 93, and 123..125, i.e. the characters:
     % ( ) , [ ] { | }
  */
  punctuation_char = ['%' + [[['(' + ')'] + ['[' + ']']] + [['{' + '}'] + ['|' + ',']]]];

  /* quote-char
     These are character codes 34 and 39 i.e. the characters `"' and `''.
  */
  quote = 39;
  quote_char = ['"' + quote];

  alpha = [[capital_letter + small_letter] + [digit + '_']];

  word = small_letter alpha*;
  symbol = symbol_char+;

  hex = [[['A' .. 'F'] + ['0' .. '9']] + ['a' .. 'f']];
  octal = ['0' .. '7'];
  bin = ['0' .. '1'];
  escape_sequences =
    '\a' | '\b' | '\t' | '\n' | '\v' | '\f' | '\r' | '\e' | '\d' |
    '\x' hex+ '\' | '\' octal+ '\' | '\' 10 | '\\' | '\' quote_char | '\`';

  /*
    variations from grammar:
      - backslash and quote_char are removed, they are added later
      - the backtick is added as a valid character
  */
  quoted_char = [[[alpha + [symbol_char - '\']] + [solo_char + punctuation_char]] + [' ' + '`']];

  string_item = escape_sequences | quoted_char | quote | '""';
  string = '"' string_item* '"';

  quoted_atom_item = escape_sequences | quoted_char | '"' | quote quote;
  quoted_atom = quote quoted_atom_item* quote;

  sign = ['-' + '+'];

  any_char = [0 .. 0xffff]; /* THIS IS ACTUALLY ANY UNICODE CHARACTER */

/*******************************************************************
 * States                                                          *
 *******************************************************************/
States
  init, normal;

/*******************************************************************
 * Tokens                                                          *
 *******************************************************************/
Tokens
  {init,normal} white_space = layout_char*;

  // K E Y W O R D S

  {init->normal} no = 'no';
  {init->normal} yes = 'yes';
  {init->normal} interrupted = 'interrupted';
  {init->normal} progress = 'progress';
  {init->normal} call_back = 'call_back';
  {init->normal} exception = 'exception';

  // P R O L O G - S T U F F
  {normal} comma = ',';
  {normal} l_par = '(';
  {normal} r_par = ')';
  {normal} l_sq = '[';
  {normal} r_sq = ']';

  {normal} integer = sign? ('0b' bin+ | '0o' octal+ | '0x' hex+ | '0' quote quoted_atom_item | digit+);
  {normal} float = sign? ((digit+ '.' digit+) | (digit+ ('.' digit+)? ['E' + 'e'] sign? digit+));
  {normal} name = solo_char | '{}' | '[]' | word | symbol | quoted_atom;
  {normal} string = string;
  {normal} variable = '_' alpha* | capital_letter alpha*;

/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens
  white_space;

/*******************************************************************
 * Productions                                                     *
 *******************************************************************/
Productions
  result {-> result} =
    {no} no {-> New result.no()} |
    {yes} yes l_par term r_par {-> New result.yes(term.term)} |
    {interrupted} interrupted {-> New result.interrupted()} |
    {exception} exception l_par term r_par {-> New result.exception(term.term)} |
    {progress} progress l_par term r_par {-> New result.progress(term.term)} |
    {call_back} call_back l_par term r_par {-> New result.call_back(term.term)};

  term {-> term} =
    {integer} integer {-> New term.integer(integer)} |
    {float} float {-> New term.float(float)} |
    {variable} variable {-> New term.variable(variable)} |
    {atom} name {-> New term.atom(name)} |
    {string} string {-> New term.string(string)} |
    {list} l_sq params r_sq {-> New term.list([params.term])} |
    {compound} [functor]:name l_par params r_par {-> New term.compound(functor, [params.term])};

  params {-> term*} = term more_params {-> [term.term, more_params.term]};
  more_params {-> term*} =
    {empty} {-> []}
    | comma term more_params {-> [term.term, more_params.term]};

Abstract Syntax Tree
  result =
    {no} |
    {yes} term |
    {interrupted} |
    {exception} term |
    {progress} term |
    {call_back} term;

  term =
    {integer} integer |
    {float} float |
    {variable} variable |
    {atom} name |
    {string} string |
    {list} [elements]:term* |
    {compound} [functor]:name [parameters]:term*;
